{"version":3,"sources":["components/CommandInput.js","components/CommandHistory.js","components/CommandArea.js","components/MemoryCell.js","components/MemoryBlock.js","components/MemoryVisualizer.js","core/engine.js","App.js","index.js"],"names":["CommandInput","props","useState","text","setText","isFocused","setIsFocused","isHovered","setIsHovered","useSpring","marginLeft","arrowLeftMargin","setArrowLeftMargin","marginRight","arrowRightMargin","setArrowRightMargin","className","div","style","onMouseEnter","onMouseLeave","opacity","language","atomDark","getPrediction","spellCheck","value","onChange","e","currentTarget","onFocus","onBlur","onKeyDown","key","onCommand","preventDefault","prediction","HistoryItem","historyItem","replace","split","map","item","CommandHistory","historySize","setHistorySize","useEffect","history","length","scrollArea","document","querySelector","scrollTop","scrollHeight","index","CommandArea","height","setHeight","config","mass","tension","friction","animatedHeight","setCommandHeight","commandHistory","command","MemoryCell","cellState","isAllocated","isReserved","MemoryBlock","blockState","cells","cell","MemoryVisualizer","memState","blocks","elem","Engine","console","log","window","devicePixelRatio","clientWidth","this","memorySize","Math","floor","reset","state","i","push","variables","help","nodeType","type","actionHadSideEffect","undefined","clearConsole","action","malloc","argument","free","setMemorySize","coalesce","Object","keys","filter","size","parseInt","Error","startIndex","freeCells","oldCellValue","cellValue","ptr","slice","next","cellValuePtr","block","createNewBlock","node","Array","isArray","evaluate","literal","number","statement","hasOwnProperty","identifier","left","right","func","functionName","arg","App","commandHeight","isDragActive","setIsDragActive","setCommandHistory","uiState","setUiState","engine","getState","cursor","onMouseMove","event","pageHeight","clientHeight","newHeight","pageY","onMouseUp","flex","onMouseDown","spaceSplit","spaceLastWord","parenthesisSplit","parenthesisLastWord","identifiers","getIdentifiers","functions","getFunctions","predictions","concat","includes","sort","startsWith","join","historyToAdd","grammar","Lexer","ParserRules","data","d","ParserStart","parser","nearley","Parser","Grammar","fromCompiled","syntaxError","feed","trim","ex","message","search","result","results","toString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7cd53e68.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandInput(props) {\r\n    const [text, setText] = useState('');\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    // This is bad code and I should probably feel some sort of remorse\r\n    const [{ marginLeft:  arrowLeftMargin },  setArrowLeftMargin]  = useSpring(() => ({marginLeft: -10}));\r\n    setArrowLeftMargin({marginLeft: text !== \"\" || isFocused || isHovered ? 0 : -10});\r\n    const [{ marginRight: arrowRightMargin }, setArrowRightMargin] = useSpring(() => ({marginRight: 10}));\r\n    setArrowRightMargin({marginRight: text !== \"\" || isFocused || isHovered ? 0 : 10});\r\n\r\n    return (\r\n        <div className=\"command-input-container\">\r\n            <animated.div\r\n                className=\"command-input-arrow\"\r\n                style={{\r\n                    marginLeft: arrowLeftMargin,\r\n                    marginRight: arrowRightMargin\r\n                }}\r\n            >\r\n                {'>'}\r\n            </animated.div>\r\n            <div\r\n                className=\"command-input\"\r\n                onMouseEnter={() => {\r\n                    setIsHovered(true);\r\n                }}\r\n                onMouseLeave={() => {\r\n                    setIsHovered(false);\r\n                }}\r\n            >\r\n                <div className=\"code-render\">\r\n                    <span style={{opacity: 0.5}}>\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.getPrediction(text)}\r\n                        </SyntaxHighlighter>\r\n                    </span>\r\n                </div>\r\n                <div className=\"code-render\">\r\n                    <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                        {text}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n                <input\r\n                    spellCheck=\"false\"\r\n                    value={text}\r\n                    onChange={(e) => {\r\n                        setText(e.currentTarget.value);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setIsFocused(true);\r\n                    }}\r\n                    onBlur={() => {\r\n                        setIsFocused(false);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Tab\") {\r\n                            e.preventDefault();\r\n                            let prediction = props.getPrediction(text);\r\n                            setText(prediction);\r\n                            return;\r\n                        }\r\n                        else if (e.key === \"Enter\") {\r\n                            if (text === '') {\r\n                                return;\r\n                            }\r\n                            props.onCommand(text);\r\n                            setText('');\r\n                            return;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandInput;","import React, { useEffect, useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nfunction insertNewlines(text) {\r\n    return text.replace(/ /g, ' ').split('\\n').map(function(item, key) {\r\n        return (\r\n            <span key={key}>\r\n                {item}\r\n                <br/>\r\n            </span>\r\n        )\r\n    })\r\n}\r\n\r\nfunction HistoryItem(props) {\r\n    return (\r\n        // <animated.div style={{marginLeft: marginLeft, opacity: opacity}} className={`command-history-item ${props.historyItem.style}`}>\r\n        <div className={`command-history-item ${props.historyItem.style}`}>\r\n            {\r\n                props.historyItem.style !== 'command' ? (\r\n                    insertNewlines(props.historyItem.text)\r\n                ) : (\r\n                    <div className=\"code-render\">\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.historyItem.text}\r\n                        </SyntaxHighlighter>\r\n                    </div>\r\n                )\r\n            }\r\n        {/* </animated.div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommandHistory(props) {\r\n    const [historySize, setHistorySize] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (historySize !== props.history.length) {\r\n            setHistorySize(props.history.length);\r\n            let scrollArea = document.querySelector('.command-history-container');\r\n            scrollArea.scrollTop = scrollArea.scrollHeight;\r\n        }\r\n    }, [historySize, props.history.length]);\r\n\r\n    return (\r\n        <div className=\"command-history-container\">\r\n            {\r\n                props.history.map((historyItem, index) =>\r\n                    <HistoryItem key={index} historyItem={historyItem} index={index} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandHistory;","import React, { useState } from 'react';\r\nimport CommandInput from './CommandInput.js';\r\nimport CommandHistory from './CommandHistory.js';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandArea(props) {\r\n    const [height, setHeight] = useState(200);\r\n\r\n    const [{ height: animatedHeight }, setCommandHeight] = useSpring(() => ({ height: 300, config: { mass: 1, tension: 540, friction: 56 } }));\r\n\r\n    if (height !== props.height) {\r\n        setHeight(props.height);\r\n        setCommandHeight({ height: props.height });\r\n    }\r\n\r\n    // Styles:\r\n    //  - command (for actual commands)\r\n    //  - error (syntax or runtime errors)\r\n    //  - info (non-error feedback)\r\n    // const pushToHistory = (payload, style) => {\r\n    //     let newHistoryItem = {};\r\n    //     newHistoryItem.style = style;\r\n    //     newHistoryItem.text = payload;\r\n    //     setCommandHistory([...commandHistory, newHistoryItem]);\r\n    // }\r\n\r\n    return (\r\n        <animated.div className=\"command-area\" style={{\r\n            height: animatedHeight,\r\n        }}>\r\n            <CommandHistory history={props.commandHistory} />\r\n            <CommandInput\r\n                getPrediction={props.getPrediction}\r\n                onCommand={command => props.onCommand(command)}\r\n            />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nexport default CommandArea;","import React from 'react';\r\n\r\nfunction MemoryCell(props) {\r\n    return (\r\n        <div className={\"cell-container\"\r\n                                + (props.cellState.isAllocated ? ' allocated' : ' unallocated')\r\n                                + (props.cellState.isReserved ? ' reserved' : ' unreserved')}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCell;","import React from 'react';\r\nimport MemoryCell from './MemoryCell.js';\r\n\r\nfunction MemoryBlock(props) {\r\n    return <span className=\"memory-block-container\">\r\n        {props.blockState.cells.map((cell, index) => {\r\n            return <MemoryCell key={index} cellState={cell} />\r\n        })}\r\n    </span>\r\n}\r\n\r\nexport default MemoryBlock;","import React from 'react';\r\nimport MemoryBlock from './MemoryBlock.js';\r\n\r\nfunction MemoryVisualizer(props) {\r\n    return (\r\n        <div className=\"memory-container\">\r\n            {props.memState.blocks.map(\r\n                (elem, index) => {\r\n                    return <MemoryBlock key={index} blockState={elem} />\r\n                }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryVisualizer;","class Engine {\r\n    constructor() {\r\n        console.log(window.devicePixelRatio)\r\n        console.log(document.querySelector('body').clientWidth)\r\n        this.memorySize = Math.floor(document.querySelector('body').clientWidth / 46) * 5;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.state = [];\r\n        for (let i = 0; i < this.memorySize; i++) {\r\n            this.state.push({\r\n                isAllocated: false,\r\n                isReserved: false,\r\n            });\r\n        }\r\n        this.state[0].isReserved = true;\r\n\r\n                // key: variable identifier\r\n        // value: {nodeType: 'variable', type: 'someType', value: someValue}\r\n        this.variables = {\r\n            help: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return '\\n- Commands use C-style syntax.\\n' +\r\n                            '- Variable declaration and assignment is supported.\\n' + \r\n                            '- Intelligent live suggestions are provided. You can use tab to insert a suggestion.\\n' + \r\n                            '- The following functions are available:\\n' + \r\n                            '  - malloc(int)\\n' + \r\n                            '  - free(int)\\n' + \r\n                            '  - coalesce()\\n' + \r\n                            '  - reset()\\n' + \r\n                            '  - clearConsole()\\n' + \r\n                            '  - setMemorySize(int)';\r\n                }\r\n            },\r\n            reset: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    this.reset();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            clearConsole: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return {\r\n                        nodeType: 'ui-action',\r\n                        action: 'clearConsole',\r\n                    }\r\n                }\r\n            },\r\n            malloc: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    let result = this.malloc(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: result,\r\n                    }\r\n                }\r\n            },\r\n            free: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.free(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            setMemorySize: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.setMemorySize(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            coalesce: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.coalesce();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n        };\r\n    }\r\n\r\n    getIdentifiers() {\r\n        return Object.keys(this.variables);\r\n    }\r\n\r\n    getFunctions() {\r\n        return Object.keys(this.variables)\r\n                    .filter(elem => this.variables[elem].type === 'function');\r\n    }\r\n\r\n\r\n\r\n    malloc(size) {\r\n        if (typeof size === 'string') {\r\n            size = parseInt(size);\r\n        }\r\n\r\n        if (size === 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be zero.');\r\n        }\r\n        else if (size < 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be negative.');\r\n        }\r\n\r\n        let startIndex;\r\n        let freeCells = 0;\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            if (this.state[i].isAllocated || this.state[i].isReserved) {\r\n                freeCells = 0;\r\n            }\r\n            else {\r\n                freeCells++;\r\n                if (freeCells === size) {\r\n                    startIndex = i - freeCells;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (startIndex === undefined) {\r\n            throw new Error('Runtime exception in malloc(): Out of memory.');\r\n        }\r\n\r\n        for (let i = startIndex; i <= startIndex + size; i++) {\r\n            this.state[i].isAllocated = true;\r\n        }\r\n\r\n        this.state[startIndex].isReserved = true;\r\n        let oldCellValue = this.state[startIndex].cellValue;\r\n        this.state[startIndex].cellValue = startIndex + size + 1;\r\n\r\n        if (this.state[startIndex + size + 1] !== undefined && !this.state[startIndex + size + 1].isReserved) {\r\n            this.state[startIndex + size + 1].isReserved = true;\r\n            this.state[startIndex + size + 1].cellValue = oldCellValue;\r\n        }\r\n\r\n        return startIndex + 1;\r\n    }\r\n\r\n    free(ptr) {\r\n        if (this.state[ptr - 1] === undefined) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer is out of bounds.');\r\n        }\r\n        else if (!this.state[ptr - 1].isReserved || !this.state[ptr - 1].isAllocated) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer does not point to the start of an allocated chunk.');\r\n        }\r\n        \r\n        this.state[ptr - 1].isAllocated = false;\r\n\r\n        for (let i = ptr; i < this.state.length; i++) {\r\n            if (this.state[i].isReserved) {\r\n                break;\r\n            }\r\n            this.state[i].isAllocated = false;\r\n        }\r\n    }\r\n\r\n    setMemorySize(size) {\r\n        if (size < 1) {\r\n            throw new Error('Runtime exception in setMemorySize(): Memory size must be at least 1.');\r\n        }\r\n\r\n        if (size === this.memorySize) {\r\n            return;\r\n        }\r\n        else if (size > this.memorySize) {\r\n            for (let i = 0; i < size - this.memorySize; i++) {\r\n                if (i === 0 && this.state[this.memorySize - 1].isAllocated) {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: true,\r\n                    });\r\n                }\r\n                else {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: false,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.state = this.state.slice(0, size);\r\n\r\n            for (let i = this.state.size - 1; i >= 0; i--) {\r\n                if (this.state[i].isReserved) {\r\n                    this.state[i].next = undefined;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.memorySize = size;\r\n    }\r\n\r\n    coalesce() {\r\n        let ptr = 0;\r\n        while (true) {\r\n            if (ptr >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (this.state[ptr].cellValue === undefined ||\r\n                this.state[ptr].cellValue < 0 ||\r\n                this.state[ptr].cellValue >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (!this.state[ptr].isAllocated && !this.state[this.state[ptr].cellValue].isAllocated) {\r\n                let cellValuePtr = this.state[ptr].cellValue;\r\n                this.state[ptr].cellValue = this.state[cellValuePtr].cellValue;\r\n                this.state[cellValuePtr].cellValue = undefined;\r\n                this.state[cellValuePtr].isReserved = false;\r\n                continue;\r\n            }\r\n\r\n            ptr = this.state[ptr].cellValue;\r\n        }\r\n    }\r\n\r\n    // Groups the state into blocks to help\r\n    // with UI structuring\r\n    getState() {\r\n        let state = {};\r\n        state.blocks = [];\r\n\r\n        let block;\r\n        let createNewBlock = true;\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            if (createNewBlock) {\r\n                if (block !== undefined) {\r\n                    state.blocks.push(block);\r\n                }\r\n\r\n                block = {cells: []};\r\n                block.isAllocated = this.state[i].isAllocated;\r\n            }\r\n\r\n            block.cells.push(this.state[i]);\r\n\r\n            createNewBlock = (i + 1 < this.state.length) && (this.state[i + 1].isReserved);\r\n        }\r\n        \r\n        state.blocks.push(block);\r\n\r\n        return state;\r\n    }\r\n\r\n\r\n\r\n    // Recursively evaluates a node in the AST\r\n    // and returns the result, along with\r\n    // performing any side effects.\r\n    evaluate(node) {\r\n        if (Array.isArray(node)) {\r\n            if (node.length === 0) {\r\n                throw new Error('Parsing error: Command is incomplete.\\n  Did you forget a \\')\\'?');\r\n            }\r\n            return (this.evaluate(node[0]))\r\n        }\r\n\r\n        switch(node.nodeType) {\r\n            case 'literal': {\r\n                return this.evaluate(node.literal);\r\n            }\r\n            case 'number': {\r\n                return node.number;\r\n            }\r\n            case 'statement': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'identifier': {\r\n                if (!this.variables.hasOwnProperty(node.identifier)) {\r\n                    throw new Error(`Reference error: '${node.identifier}' is not defined.`);\r\n                }\r\n                return this.variables[node.identifier];\r\n            }\r\n            case 'whiteSpace': {\r\n                return undefined;\r\n            }\r\n            case 'assignment': {\r\n                let identifier;\r\n                if (node.left.nodeType === 'identifier') {\r\n                    identifier = node.left.identifier;\r\n                    if (this.variables[identifier] === undefined) {\r\n                        throw new Error(`Reference error: '${identifier}' is not defined.`)\r\n                    }\r\n                }\r\n                else if (node.left.nodeType === 'declaration') {\r\n                    identifier = this.evaluate(node.left).identifier;\r\n                }\r\n\r\n                let value = this.evaluate(node.right);\r\n\r\n                if (value.nodeType === 'variable') {\r\n                    this.variables[identifier].type = value.type;\r\n                    this.variables[identifier].value = value.value;\r\n                }\r\n                else {\r\n                    this.variables[identifier].type = 'int';\r\n                    this.variables[identifier].value = value;\r\n                }\r\n\r\n                return value;\r\n            }\r\n            case 'functionCall': {\r\n                let func = this.evaluate(node.functionName);\r\n                if (func.type !== 'function') {\r\n                    throw new Error(`Type error: '${node.functionName.identifier}' is not a function.`);\r\n                }\r\n\r\n                let arg = node.argument ? this.evaluate(node.argument) : undefined;\r\n\r\n                return func.value(arg !== undefined && arg.nodeType === 'variable' ? arg.value : arg);\r\n            }\r\n            case 'declaration': {\r\n                let type = this.evaluate(node.type);\r\n                let identifier = node.identifier.identifier;\r\n                if (this.variables[identifier] !== undefined) {\r\n                    throw new Error(`Syntax error: Identifier '${identifier}' has already been declared.`);\r\n                }\r\n                this.variables[identifier] = {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: undefined,\r\n                }\r\n                return node.identifier;\r\n            }\r\n            case 'type': {\r\n                return node.type;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;","import React, { useState } from 'react';\nimport './App.css';\nimport CommandArea from './components/CommandArea.js';\nimport MemoryVisualizer from './components/MemoryVisualizer.js';\nimport nearley from 'nearley';\nimport Engine from './core/engine.js';\n\nfunction App(props) {\n    const [commandHeight, setCommandHeight] = useState(300);\n    const [isDragActive, setIsDragActive] = useState(false);\n    const [commandHistory, setCommandHistory] = useState([]);\n    const [uiState, setUiState] = useState([]);\n    \n    if (window.engine === undefined) {\n        window.engine = new Engine();\n        setUiState(window.engine.getState());\n    }\n\n    if (commandHistory.length === 0) {\n        setCommandHistory([{\n            style: 'info',\n            text: '-> Type help() for usage.',\n        }]);\n    }\n    \n    let handleMouseMove = (event) => {\n        if (!isDragActive) {\n            return;\n        }\n\n        let pageHeight = document.querySelector('body').clientHeight;\n\n        let newHeight = pageHeight - event.pageY;\n        if (newHeight < 250) {\n            newHeight = 250;\n        }\n        else if (newHeight > pageHeight * 4 / 7) {\n            newHeight = pageHeight * 4 / 7;\n        }\n        newHeight -= 3; // Account for spacer height\n        setCommandHeight(newHeight);\n    }\n\n    return (\n        <div className=\"App\"\n            style={{\n                cursor: isDragActive ? 'ns-resize' : undefined,\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseUp={() => {\n                setIsDragActive(false);\n            }}\n        >\n            <div className=\"mainContent\"\n                style={{flex: 1}}>\n                    <MemoryVisualizer memState={uiState} />\n            </div>\n            <div className=\"spacer\"\n                onMouseDown={() => {setIsDragActive(true)}}\n                style={{\n                    height: 6,\n                }} />\n            <CommandArea\n                height={ commandHeight }\n                commandHistory={commandHistory}\n                getPrediction={text => {\n                    let spaceSplit = text.split(' ');\n                    let spaceLastWord = spaceSplit[spaceSplit.length - 1];\n            \n                    let parenthesisSplit = text.split('(');\n                    let parenthesisLastWord = parenthesisSplit[parenthesisSplit.length - 1];\n            \n                    if (spaceLastWord === '' || parenthesisLastWord === '') {\n                        return text;\n                    }\n                    \n                    const zeroArgumentFunctions = ['help', 'reset', 'clearConsole', 'coalesce'];\n                    const oneArgumentFunctions = ['malloc', 'free', 'setMemorySize'];\n            \n                    let identifiers = window.engine.getIdentifiers();\n                    let functions = window.engine.getFunctions();\n\n                    let predictions = oneArgumentFunctions\n                        .map(elem => elem + '(')\n                        .concat(\n                            zeroArgumentFunctions.map(elem => elem + '()'))\n                        .concat(\n                            identifiers.filter(identifier => !functions.includes(identifier)));\n            \n                    predictions = predictions.sort();\n                    \n                    for (let prediction of predictions) {\n                        if (prediction.startsWith(spaceLastWord)) {\n                            spaceSplit[spaceSplit.length - 1] = prediction;\n                            return spaceSplit.join(' ');\n                        }\n                        if (prediction.startsWith(parenthesisLastWord)) {\n                            parenthesisSplit[parenthesisSplit.length - 1] = prediction;\n                            return parenthesisSplit.join('(');\n                        }\n                    }\n            \n                    return text;\n                }}\n                onCommand={command => {\n                    let historyToAdd = [];\n\n                    historyToAdd.push({\n                        style: 'command',\n                        text: command\n                    })\n\n                    /*\n                        Main -> statement | statement _ \";\"\n\n                        statement -> literal | identifier | assignment | functionCall | declaration | _ {%\n                            function(data) {\n                                return {\n                                    nodeType: 'statement',\n                                    statement: data[0]\n                                }\n                            }\n                        %}\n\n                        number -> [0-9]:+ {%\n                            function(data) {\n                                return {\n                                    nodeType: 'number',\n                                    number: data[0].join().replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        literal -> number {%\n                            function(data) {\n                                return {\n                                    nodeType: 'literal',\n                                    literal: data[0]\n                                }\n                            }\n                        %}\n\n                        identifier -> [a-zA-Z_] [a-zA-Z0-9_]:* {%\n                            function(data) {\n                                return {\n                                    nodeType: 'identifier',\n                                    identifier: (data[0] + data[1]).replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        _ -> [ ]:* {%\n                            function(data) {\n                                return {\n                                    nodeType: 'whiteSpace'\n                                }\n                            }\n                        %}\n\n                        assignment -> (declaration | identifier) _ \"=\" _ statement {%\n                            function(data) {\n                                return {\n                                    nodeType: 'assignment',\n                                    left: data[0][0],\n                                    right: data[4][0]\n                                }\n                            }\n                        %}\n\n                        functionCall -> identifier _ \"(\" _ statement _ \")\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'functionCall',\n                                    functionName: data[0],\n                                    argument: data[4].nodeType === 'whiteSpace' ? undefined : data[4][0]\n                                }\n                            }\n                        %}\n\n                        declaration -> type _ identifier {%\n                            function(data) {\n                                return {\n                                    nodeType: 'declaration',\n                                    type: data[0],\n                                    identifier: data[2]\n                                }\n                            }\n                        %}\n\n                        type -> \"int\" | (\"int\" _ \"*\") {%\n                            function(data) {\n                                let type;\n                                if (Array.isArray(data[0])) {\n                                    type = data[0][0] + data[0][2];\n                                }\n                                else {\n                                    type = data[0];\n                                }\n                                return {\n                                    nodeType: 'type',\n                                    type: type\n                                }\n                            }\n                        %}\n                    */\n\n                    let grammar = {\n                        Lexer: undefined,\n                        ParserRules: [\n                        {\"name\": \"Main\", \"symbols\": [\"statement\"]},\n                        {\"name\": \"Main\", \"symbols\": [\"statement\", \"_\", {\"literal\":\";\",\"pos\":12}]},\n                        {\"name\": \"statement\", \"symbols\": [\"literal\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"assignment\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"functionCall\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"declaration\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"_\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'statement',\n                                    statement: data[0]\n                                }\n                            }\n                            },\n                        {\"name\": \"number$ebnf$1\", \"symbols\": [/[0-9]/]},\n                        {\"name\": \"number$ebnf$1\", \"symbols\": [/[0-9]/, \"number$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"number\", \"symbols\": [\"number$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'number',\n                                    number: data[0].join().replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"literal\", \"symbols\": [\"number\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'literal',\n                                    literal: data[0]\n                                }\n                            }\n                            },\n                        {\"name\": \"identifier$ebnf$1\", \"symbols\": []},\n                        {\"name\": \"identifier$ebnf$1\", \"symbols\": [/[a-zA-Z0-9_]/, \"identifier$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"identifier\", \"symbols\": [/[a-zA-Z_]/, \"identifier$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'identifier',\n                                    identifier: (data[0] + data[1]).replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"_$ebnf$1\", \"symbols\": []},\n                        {\"name\": \"_$ebnf$1\", \"symbols\": [/[ ]/, \"_$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'whiteSpace'\n                                }\n                            }\n                            },\n                        {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"declaration\"]},\n                        {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"assignment\", \"symbols\": [\"assignment$subexpression$1\", \"_\", {\"literal\":\"=\",\"pos\":93}, \"_\", \"statement\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'assignment',\n                                    left: data[0][0],\n                                    right: data[4][0]\n                                }\n                            }\n                            },\n                        {\"name\": \"functionCall\", \"symbols\": [\"identifier\", \"_\", {\"literal\":\"(\",\"pos\":109}, \"_\", \"statement\", \"_\", {\"literal\":\")\",\"pos\":117}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'functionCall',\n                                    functionName: data[0],\n                                    argument: data[4] === 'whiteSpace' ? data[4] : data[4][0]\n                                }\n                            }\n                            },\n                        {\"name\": \"declaration\", \"symbols\": [\"type\", \"_\", \"identifier\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'declaration',\n                                    type: data[0],\n                                    identifier: data[2]\n                                }\n                            }\n                            },\n                        {\"name\": \"type$string$1\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type\", \"symbols\": [\"type$string$1\"]},\n                        {\"name\": \"type$subexpression$1$string$1\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$1\", \"_\", {\"literal\":\"*\",\"pos\":146}]},\n                        {\"name\": \"type\", \"symbols\": [\"type$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                let type;\n                                if (Array.isArray(data[0])) {\n                                    type = data[0][0] + data[0][2];\n                                }\n                                else {\n                                    type = data[0];\n                                }\n                                return {\n                                    nodeType: 'type',\n                                    type: type\n                                }\n                            }\n                            }\n                    ]\n                      , ParserStart: \"Main\"\n                    }\n\n                    let parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));\n\n                    let syntaxError = false;\n\n                    try {\n                        parser.feed(command.trim());\n                    }\n                    catch (ex) {\n                        syntaxError = true;\n                        historyToAdd.push({\n                            style: 'error',\n                            text: ex.message.slice(0, ex.message.search('Instead, ')).replace(/line [0-9]+ /, ''),\n                        });\n                    }\n\n                    if (!syntaxError) {\n                        try {\n                            let result = window.engine.evaluate(parser.results);\n\n                            if (result.actionHadSideEffect) {\n                                setUiState(window.engine.getState());\n                            }\n\n                            if (result !== undefined && result.toString() !== '') {\n                                if (result.nodeType === 'variable') {\n                                    result = result.value;\n                                }\n                                else if (result.nodeType === 'identifier') {\n                                    result = undefined;\n                                }\n                                else if (result.nodeType === 'ui-action') {\n                                    if (result.action === 'clearConsole') {\n                                        setCommandHistory([]);\n                                        return;\n                                    }\n                                    else {\n                                        throw new Error('Internal error: Unsupported UI action.');\n                                    }\n                                }\n                            }\n\n                            if (result === undefined) {\n                                result = 'null';\n                            }\n\n                            historyToAdd.push({\n                                style: 'info',\n                                text: `-> ${result.toString()}`,\n                            });\n                        }\n                        catch (ex) {\n                            historyToAdd.push({\n                                style: 'error',\n                                text: ex.message,\n                            });\n                        }\n                    }\n\n                    setCommandHistory([...commandHistory, ...historyToAdd]);\n                }}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}