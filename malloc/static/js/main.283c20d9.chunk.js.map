{"version":3,"sources":["components/CommandInput.js","components/CommandHistory.js","components/CommandArea.js","components/MemoryCell.js","components/MemoryBlock.js","components/MemoryVisualizer.js","core/engine.js","core/grammar.js","App.js","index.js"],"names":["CommandInput","props","useState","text","setText","isFocused","setIsFocused","isHovered","setIsHovered","useSpring","marginLeft","arrowLeftMargin","setArrowLeftMargin","marginRight","arrowRightMargin","setArrowRightMargin","className","div","style","onMouseEnter","onMouseLeave","opacity","language","atomDark","getPrediction","spellCheck","value","onChange","e","currentTarget","onFocus","onBlur","onKeyDown","key","onCommand","preventDefault","prediction","HistoryItem","historyItem","replace","split","map","item","CommandHistory","historySize","setHistorySize","useEffect","history","length","scrollArea","document","querySelector","scrollTop","scrollHeight","index","CommandArea","height","setHeight","config","mass","tension","friction","animatedHeight","setCommandHeight","commandHistory","command","MemoryCell","cellState","isAllocated","isReserved","MemoryBlock","blockState","cells","cell","MemoryVisualizer","memState","blocks","elem","Engine","this","memorySize","Math","floor","clientWidth","reset","state","i","push","variables","help","nodeType","type","undefined","clearConsole","action","malloc","argument","free","freeAll","cellValue","setMemorySize","coalesce","sizeof","Error","val","setAllocationMethod","method","currentAllocationMethod","getAllocationMethod","int","double","string","char","Object","keys","filter","size","parseInt","startIndex","bestSize","bestStart","cellVal","oldCellValue","ptr","slice","next","cellValuePtr","console","log","block","createNewBlock","node","Array","isArray","evaluate","literal","statement","hasOwnProperty","identifier","left","right","endsWith","func","functionName","arg","declaration","oldType","oldValue","validFromTypes","includes","result","parseFloat","operator","Lexer","ParserRules","data","d","concat","join","ParserStart","App","commandHeight","isDragActive","setIsDragActive","setCommandHistory","uiState","setUiState","window","engine","getState","cursor","onMouseMove","event","pageHeight","clientHeight","newHeight","pageY","onMouseUp","flex","onMouseDown","spaceSplit","spaceLastWord","parenthesisSplit","parenthesisLastWord","identifiers","getIdentifiers","functions","getFunctions","predictions","sort","startsWith","historyToAdd","parser","nearley","Parser","Grammar","fromCompiled","syntaxError","feed","trim","ex","message","search","results","toString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.283c20d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandInput(props) {\r\n    const [text, setText] = useState('');\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    // This is bad code and I should probably feel some sort of remorse\r\n    const [{ marginLeft:  arrowLeftMargin },  setArrowLeftMargin]  = useSpring(() => ({marginLeft: -10}));\r\n    setArrowLeftMargin({marginLeft: text !== \"\" || isFocused || isHovered ? 0 : -10});\r\n    const [{ marginRight: arrowRightMargin }, setArrowRightMargin] = useSpring(() => ({marginRight: 10}));\r\n    setArrowRightMargin({marginRight: text !== \"\" || isFocused || isHovered ? 0 : 10});\r\n\r\n    return (\r\n        <div className=\"command-input-container\">\r\n            <animated.div\r\n                className=\"command-input-arrow\"\r\n                style={{\r\n                    marginLeft: arrowLeftMargin,\r\n                    marginRight: arrowRightMargin\r\n                }}\r\n            >\r\n                {'>'}\r\n            </animated.div>\r\n            <div\r\n                className=\"command-input\"\r\n                onMouseEnter={() => {\r\n                    setIsHovered(true);\r\n                }}\r\n                onMouseLeave={() => {\r\n                    setIsHovered(false);\r\n                }}\r\n            >\r\n                <div className=\"code-render\">\r\n                    <span style={{opacity: 0.5}}>\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.getPrediction(text)}\r\n                        </SyntaxHighlighter>\r\n                    </span>\r\n                </div>\r\n                <div className=\"code-render\">\r\n                    <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                        {text}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n                <input\r\n                    spellCheck=\"false\"\r\n                    value={text}\r\n                    onChange={(e) => {\r\n                        setText(e.currentTarget.value);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setIsFocused(true);\r\n                    }}\r\n                    onBlur={() => {\r\n                        setIsFocused(false);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Tab\") {\r\n                            e.preventDefault();\r\n                            let prediction = props.getPrediction(text);\r\n                            setText(prediction);\r\n                            return;\r\n                        }\r\n                        else if (e.key === \"Enter\") {\r\n                            if (text === '') {\r\n                                return;\r\n                            }\r\n                            props.onCommand(text);\r\n                            setText('');\r\n                            return;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandInput;","import React, { useEffect, useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nfunction insertNewlines(text) {\r\n    return text.replace(/ /g, ' ').split('\\n').map(function(item, key) {\r\n        return (\r\n            <span key={key}>\r\n                {item}\r\n                <br/>\r\n            </span>\r\n        )\r\n    })\r\n}\r\n\r\nfunction HistoryItem(props) {\r\n    return (\r\n        // <animated.div style={{marginLeft: marginLeft, opacity: opacity}} className={`command-history-item ${props.historyItem.style}`}>\r\n        <div className={`command-history-item ${props.historyItem.style}`}>\r\n            {\r\n                props.historyItem.style !== 'command' ? (\r\n                    insertNewlines(props.historyItem.text)\r\n                ) : (\r\n                    <div className=\"code-render\">\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.historyItem.text}\r\n                        </SyntaxHighlighter>\r\n                    </div>\r\n                )\r\n            }\r\n        {/* </animated.div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommandHistory(props) {\r\n    const [historySize, setHistorySize] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (historySize !== props.history.length) {\r\n            setHistorySize(props.history.length);\r\n            let scrollArea = document.querySelector('.command-history-container');\r\n            scrollArea.scrollTop = scrollArea.scrollHeight;\r\n        }\r\n    }, [historySize, props.history.length]);\r\n\r\n    return (\r\n        <div className=\"command-history-container\">\r\n            {\r\n                props.history.map((historyItem, index) =>\r\n                    <HistoryItem key={index} historyItem={historyItem} index={index} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandHistory;","import React, { useState } from 'react';\r\nimport CommandInput from './CommandInput.js';\r\nimport CommandHistory from './CommandHistory.js';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandArea(props) {\r\n    const [height, setHeight] = useState(200);\r\n\r\n    const [{ height: animatedHeight }, setCommandHeight] = useSpring(() => ({ height: 500, config: { mass: 1, tension: 540, friction: 56 } }));\r\n\r\n    if (height !== props.height) {\r\n        setHeight(props.height);\r\n        setCommandHeight({ height: props.height });\r\n    }\r\n\r\n    // Styles:\r\n    //  - command (for actual commands)\r\n    //  - error (syntax or runtime errors)\r\n    //  - info (non-error feedback)\r\n    // const pushToHistory = (payload, style) => {\r\n    //     let newHistoryItem = {};\r\n    //     newHistoryItem.style = style;\r\n    //     newHistoryItem.text = payload;\r\n    //     setCommandHistory([...commandHistory, newHistoryItem]);\r\n    // }\r\n\r\n    return (\r\n        <animated.div className=\"command-area\" style={{\r\n            height: animatedHeight,\r\n        }}>\r\n            <CommandHistory history={props.commandHistory} />\r\n            <CommandInput\r\n                getPrediction={props.getPrediction}\r\n                onCommand={command => props.onCommand(command)}\r\n            />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nexport default CommandArea;","import React from 'react';\r\n\r\nfunction MemoryCell(props) {\r\n    return (\r\n        <div className={\"cell-container\"\r\n                                + (props.cellState.isAllocated ? ' allocated' : ' unallocated')\r\n                                + (props.cellState.isReserved ? ' reserved' : ' unreserved')}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCell;","import React from 'react';\r\nimport MemoryCell from './MemoryCell.js';\r\n\r\nfunction MemoryBlock(props) {\r\n    return <span className=\"memory-block-container\">\r\n        {props.blockState.cells.map((cell, index) => {\r\n            return <MemoryCell key={index} cellState={cell} />\r\n        })}\r\n    </span>\r\n}\r\n\r\nexport default MemoryBlock;","import React from 'react';\r\nimport MemoryBlock from './MemoryBlock.js';\r\n\r\nfunction MemoryVisualizer(props) {\r\n    return (\r\n        <div className=\"memory-container\">\r\n            {props.memState.blocks.map(\r\n                (elem, index) => {\r\n                    return <MemoryBlock key={index} blockState={elem} />\r\n                }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryVisualizer;","class Engine {\r\n    constructor() {\r\n        this.memorySize = Math.floor(document.querySelector('body').clientWidth / 46) * 3;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.state = [];\r\n        for (let i = 0; i < this.memorySize; i++) {\r\n            this.state.push({\r\n                isAllocated: false,\r\n                isReserved: false,\r\n            });\r\n        }\r\n        this.state[0].isReserved = true;\r\n\r\n        // key: variable identifier\r\n        // value: {nodeType: 'variable', type: 'someType', value: someValue}\r\n        this.variables = {\r\n            help: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return '\\n- Commands use C-style syntax.\\n' +\r\n                            '- Variable declaration and assignment is supported.\\n' + \r\n                            '- Intelligent live suggestions are provided. You can use tab to insert a suggestion.\\n' + \r\n                            '- The following functions are available:\\n' + \r\n                            '  - malloc(int)\\n' + \r\n                            '  - free(int)\\n' + \r\n                            '  - freeAll()\\n' + \r\n                            '  - coalesce()\\n' + \r\n                            '  - setMemorySize(int)\\n' +\r\n                            '  - sizeof(any)\\n' + \r\n                            '  - setAllocationMethod(\"best fit\" | \"worst fit\" | \"first fit\")\\n' + \r\n                            '  - getAllocationMethod()\\n' + \r\n                            '  - reset()\\n' + \r\n                            '  - clearConsole()';\r\n                }\r\n            },\r\n            reset: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    this.reset();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            clearConsole: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return {\r\n                        nodeType: 'ui-action',\r\n                        action: 'clearConsole',\r\n                    }\r\n                }\r\n            },\r\n            malloc: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    let result = this.malloc(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: result,\r\n                    }\r\n                }\r\n            },\r\n            free: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.free(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            freeAll: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    let i = 0;\r\n                    while(i !== undefined) {\r\n                        if (this.state[i].isAllocated) {\r\n                            this.free(i + 1);\r\n                        }\r\n                        i = this.state[i].cellValue;\r\n                    }\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            setMemorySize: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.setMemorySize(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            coalesce: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.coalesce();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            sizeof: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    if (argument === undefined) {\r\n                        throw new Error('Syntax error (\"sizeof()\"):\\n  Expected 1 argument, got 0.');\r\n                    }\r\n                    let type = argument.type;\r\n                    if (type === undefined) {\r\n                        throw new Error('This is a bug lol');\r\n                    }\r\n\r\n                    let val;\r\n                    switch(type) {\r\n                        case 'int':\r\n                            val = 1;\r\n                            break;\r\n                        case 'char':\r\n                            val = 1;\r\n                            break;\r\n                        case 'double':\r\n                            val = 2;\r\n                            break;\r\n                        default:\r\n                            val = -1;\r\n                            break;\r\n                    }\r\n\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'string',\r\n                        value: val,\r\n                    }\r\n                }\r\n            },\r\n            setAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (method) => {\r\n                    if (method === 'best fit' || method === 'worst fit' || method === 'first fit') {\r\n                        this.variables.currentAllocationMethod = {\r\n                            nodeType: 'variable',\r\n                            type: 'string',\r\n                            value: method\r\n                        }\r\n                        return {\r\n                            nodeType: 'variable',\r\n                        };\r\n                    }\r\n                    else {\r\n                        throw new Error('Runtime exception in setAllocationMethod(): Method is invalid.\\n  Valid methods are \"best fit\", \"worst fit\", and \"first fit\".');\r\n                    }\r\n                }\r\n            },\r\n            getAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return this.variables.currentAllocationMethod;\r\n                }\r\n            },\r\n            currentAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'string',\r\n                value: 'first fit'\r\n            },\r\n            int: {\r\n                nodeType: 'type',\r\n                type: 'int'\r\n            },\r\n            double: {\r\n                nodeType: 'type',\r\n                type: 'double'\r\n            },\r\n            string: {\r\n                nodeType: 'type',\r\n                type: 'string'\r\n            },\r\n            char: {\r\n                nodeType: 'type',\r\n                type: 'char'\r\n            }\r\n        };\r\n    }\r\n\r\n    getIdentifiers() {\r\n        return Object.keys(this.variables);\r\n    }\r\n\r\n    getFunctions() {\r\n        return Object.keys(this.variables)\r\n                    .filter(elem => this.variables[elem].type === 'function');\r\n    }\r\n\r\n\r\n\r\n    malloc(size) {\r\n        if (typeof size === 'string') {\r\n            size = parseInt(size);\r\n        }\r\n\r\n        if (size === 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be zero.');\r\n        }\r\n        else if (size < 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be negative.');\r\n        }\r\n\r\n        let startIndex;\r\n\r\n        switch(this.variables.currentAllocationMethod.value) {\r\n            case 'first fit': {\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    if (!this.state[i].isAllocated) {\r\n                        let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                        let currentSize = cellVal - i - 1;\r\n                        if (currentSize >= size) {\r\n                            startIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                break;\r\n            }\r\n            case 'best fit': {\r\n                let bestSize = this.state.length - 1; // accounts for reserved word\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 < bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            case 'worst fit': {\r\n                let bestSize = 0;\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 > bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error('Runtime exception in malloc():\\n  Allocation method is invalid.\\n  Hint: Don\\t set currentAllocationMethod directly; instead, use setAllocationMethod().')\r\n        }\r\n        \r\n        if (startIndex === undefined) {\r\n            throw new Error('Runtime exception in malloc(): Out of memory.');\r\n        }\r\n\r\n        for (let i = startIndex; i <= startIndex + size; i++) {\r\n            this.state[i].isAllocated = true;\r\n        }\r\n\r\n        this.state[startIndex].isReserved = true;\r\n        let oldCellValue = this.state[startIndex].cellValue;\r\n        this.state[startIndex].cellValue = startIndex + size + 1;\r\n        if (this.state[startIndex].cellValue >= this.state.length) {\r\n            this.state[startIndex].cellValue = undefined;\r\n        }\r\n\r\n        if (this.state[startIndex + size + 1] !== undefined && !this.state[startIndex + size + 1].isReserved) {\r\n            this.state[startIndex + size + 1].isReserved = true;\r\n            this.state[startIndex + size + 1].cellValue = oldCellValue;\r\n        }\r\n\r\n        return startIndex + 1;\r\n    }\r\n\r\n    free(ptr) {\r\n        if (this.state[ptr - 1] === undefined) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer is out of bounds.');\r\n        }\r\n        else if (!this.state[ptr - 1].isReserved || !this.state[ptr - 1].isAllocated) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer does not point to the start of an allocated chunk.');\r\n        }\r\n        \r\n        this.state[ptr - 1].isAllocated = false;\r\n\r\n        for (let i = ptr; i < this.state.length; i++) {\r\n            if (this.state[i].isReserved) {\r\n                break;\r\n            }\r\n            this.state[i].isAllocated = false;\r\n        }\r\n    }\r\n\r\n    setMemorySize(size) {\r\n        if (size < 1) {\r\n            throw new Error('Runtime exception in setMemorySize(): Memory size must be at least 1.');\r\n        }\r\n\r\n        if (size === this.memorySize) {\r\n            return;\r\n        }\r\n        else if (size > this.memorySize) {\r\n            for (let i = 0; i < size - this.memorySize; i++) {\r\n                if (i === 0 && this.state[this.memorySize - 1].isAllocated) {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: true,\r\n                    });\r\n                }\r\n                else {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: false,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.state = this.state.slice(0, size);\r\n\r\n            for (let i = this.state.size - 1; i >= 0; i--) {\r\n                if (this.state[i].isReserved) {\r\n                    this.state[i].next = undefined;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.memorySize = size;\r\n    }\r\n\r\n    coalesce() {\r\n        let ptr = 0;\r\n        while (true) {\r\n            if (ptr >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (this.state[ptr].cellValue === undefined ||\r\n                this.state[ptr].cellValue < 0 ||\r\n                this.state[ptr].cellValue >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (!this.state[ptr].isAllocated && !this.state[this.state[ptr].cellValue].isAllocated) {\r\n                let cellValuePtr = this.state[ptr].cellValue;\r\n                this.state[ptr].cellValue = this.state[cellValuePtr].cellValue;\r\n                this.state[cellValuePtr].cellValue = undefined;\r\n                this.state[cellValuePtr].isReserved = false;\r\n                continue;\r\n            }\r\n\r\n            ptr = this.state[ptr].cellValue;\r\n        }\r\n    }\r\n\r\n    // Groups the state into blocks to help\r\n    // with UI structuring\r\n    getState() {\r\n        console.log(this.state);\r\n        let state = {};\r\n        state.blocks = [];\r\n\r\n        let block;\r\n        let createNewBlock = true;\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            if (createNewBlock) {\r\n                if (block !== undefined) {\r\n                    state.blocks.push(block);\r\n                }\r\n\r\n                block = {cells: []};\r\n                block.isAllocated = this.state[i].isAllocated;\r\n            }\r\n\r\n            block.cells.push(this.state[i]);\r\n\r\n            createNewBlock = (i + 1 < this.state.length) && (this.state[i + 1].isReserved);\r\n        }\r\n        \r\n        state.blocks.push(block);\r\n\r\n        return state;\r\n    }\r\n\r\n\r\n\r\n    // Recursively evaluates a node in the AST\r\n    // and returns the result, along with\r\n    // performing any side effects.\r\n    evaluate(node) {\r\n        if (node === null || node === undefined) {\r\n            return {\r\n                nodeType: 'variable',\r\n                value: undefined\r\n            };\r\n        }\r\n\r\n        if (Array.isArray(node)) {\r\n            if (node.length === 0) {\r\n                throw new Error('Parsing error: Command is incomplete.\\n  Did you forget a \\')\\'?');\r\n            }\r\n            return (this.evaluate(node[0]))\r\n        }\r\n\r\n        switch(node.nodeType) {\r\n            case 'literal': {\r\n                return this.evaluate(node.literal);\r\n            }\r\n            case 'int': {\r\n                return node.int;\r\n            }\r\n            case 'char': {\r\n                return node.char;\r\n            }\r\n            case 'double': {\r\n                return node.double;\r\n            }\r\n            case 'string': {\r\n                return node.string;\r\n            }\r\n            case 'statement': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'identifier': {\r\n                if (!this.variables.hasOwnProperty(node.identifier)) {\r\n                    throw new Error(`Reference error: '${node.identifier}' is not defined.`);\r\n                }\r\n                return this.variables[node.identifier];\r\n            }\r\n            case 'assignment': {\r\n                let identifier;\r\n                if (node.left.nodeType === 'identifier') {\r\n                    identifier = node.left.identifier;\r\n                    if (this.variables[identifier] === undefined) {\r\n                        throw new Error(`Reference error: '${identifier}' is not defined.`)\r\n                    }\r\n                }\r\n                else if (node.left.nodeType === 'declaration') {\r\n                    identifier = this.evaluate(node.left).identifier;\r\n                }\r\n\r\n                let value;\r\n\r\n                if (node.right.nodeType === 'literal') {\r\n                    value = this.evaluate(node.right);\r\n\r\n                    let type = node.right.literal.nodeType;\r\n\r\n                    value = {\r\n                        nodeType: 'variable',\r\n                        type: type,\r\n                        value: value\r\n                    }\r\n                }\r\n                else if (node.right.nodeType === 'variable') {\r\n                    value = node.right;\r\n                }\r\n                else {\r\n                    value = this.evaluate(node.right);\r\n                }\r\n\r\n                if (value.nodeType === 'variable') {\r\n                    if (this.variables[identifier].type !== value.type) {\r\n                        if (this.variables[identifier].type === 'int' && value.type === 'double') {\r\n                            this.variables[identifier].value = parseInt(value.value);\r\n                        }\r\n                        else if (this.variables[identifier].type === 'double' && value.type === 'int') {\r\n                            this.variables[identifier].value = value.value;\r\n                        }\r\n                        else if ((this.variables[identifier].type.endsWith('*') || this.variables[identifier].type === 'int' || this.variables[identifier].type === 'char')\r\n                                && (value.type.endsWith('*') || value.type === 'int' || value.type === 'char')) {\r\n                                    this.variables[identifier].value = value.value;\r\n                                }\r\n                        else {\r\n                            throw new Error(`Syntax error: Type mismatch between ${this.variables[identifier].type} and ${value.type}.`)\r\n                        }\r\n                    }\r\n                    this.variables[identifier].value = value.value;\r\n                }\r\n                else {\r\n                    this.variables[identifier].type = 'int';  // um,\r\n                    this.variables[identifier].value = value;\r\n                }\r\n\r\n                return value;\r\n            }\r\n            case 'functionCall': {\r\n                let func = this.evaluate(node.functionName);\r\n                if (func.type !== 'function') {\r\n                    throw new Error(`Type error: '${node.functionName.identifier}' is not a function.`);\r\n                }\r\n\r\n                let arg = node.argument ? this.evaluate(node.argument) : undefined;\r\n\r\n                return func.value(arg !== undefined && arg.nodeType === 'variable' ? arg.value : arg);\r\n            }\r\n            case 'declaration': {\r\n                return this.evaluate(node.declaration);\r\n            }\r\n            case 'singleDeclaration': {\r\n                let type = this.evaluate(node.type);\r\n                let identifier = node.identifier.identifier;\r\n                if (this.variables[identifier] !== undefined) {\r\n                    throw new Error(`Syntax error: Identifier '${identifier}' has already been declared.`);\r\n                }\r\n                this.variables[identifier] = {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: undefined,\r\n                }\r\n                return node.identifier;\r\n            }\r\n            case 'arrayDeclaration': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            case 'cast': {\r\n                console.log(node);\r\n\r\n                let oldValue = this.evaluate(node.statement);\r\n                let oldType;\r\n                console.log(oldValue);\r\n\r\n                let hadSideEffect;\r\n\r\n                switch(oldValue.nodeType) {\r\n                    case undefined:\r\n                        oldType = node.statement.literal.nodeType;\r\n                        break;\r\n                    case 'variable':\r\n                        oldType = oldValue.type;\r\n                        oldValue = oldValue.value;\r\n                        break;\r\n                    default:\r\n                        throw new Error('Whatever you just did is \"not supported\" (probably a bug).')\r\n                }\r\n\r\n                let validFromTypes = [];\r\n\r\n                if (node.type.type.endsWith('*')) {\r\n                    validFromTypes = ['int*', 'double*', 'string*', 'char*', 'int', 'char', 'void*'];\r\n                }\r\n                else {\r\n                    switch(node.type.type) {\r\n                        case 'char':\r\n                        case 'int':\r\n                            if (oldType === 'double') {\r\n                                oldValue = parseInt(oldValue)\r\n                            }\r\n                        case 'double':\r\n                            validFromTypes = ['int', 'int*', 'double', 'double*', 'string*', 'char*', 'char', 'void*'];\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (!validFromTypes.includes(oldType)) {\r\n                    throw new Error(`Syntax error:\\n  Type mismatch: Cannot cast from ${oldType} to ${node.type.type}`);\r\n                }\r\n                \r\n                return {\r\n                    nodeType: 'variable',\r\n                    type: node.type.type,\r\n                    value: oldValue,\r\n                }\r\n            }\r\n            case 'parenthesis': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'operator': {\r\n                let left;\r\n                let right;\r\n\r\n                if (node.left.nodeType === 'literal') {\r\n                    left = {\r\n                        nodeType: 'variable',\r\n                        type: node.left.literal.nodeType,\r\n                        value: this.evaluate(node.left)\r\n                    }\r\n                }\r\n                else {\r\n                    left = this.evaluate(node.left);\r\n                }\r\n\r\n                if (node.right.nodeType === 'literal') {\r\n                    right = {\r\n                        nodeType: 'variable',\r\n                        type: node.right.literal.nodeType,\r\n                        value: this.evaluate(node.right)\r\n                    }\r\n                }\r\n                else {\r\n                    right = this.evaluate(node.right);\r\n                }\r\n\r\n                if (left.value !== undefined) {\r\n                    let type = left.type;\r\n                    left = left.value;\r\n                    if (type === 'double') {\r\n                        left = parseFloat(left);\r\n                    }\r\n                    else if (type === 'int') {\r\n                        left = parseInt(left);\r\n                    }\r\n                }\r\n\r\n                if (right.value !== undefined) {\r\n                    let type = right.type;\r\n                    right = right.value;\r\n                    if (type === 'double') {\r\n                        right = parseFloat(right);\r\n                    }\r\n                    else if (type === 'int') {\r\n                        right = parseInt(right);\r\n                    }\r\n                }\r\n\r\n                if (typeof left !== typeof right) {\r\n                    throw new Error('Syntax error: Type mismatch.');\r\n                }\r\n\r\n                let result;\r\n\r\n                switch(node.operator) {\r\n                    case '+':\r\n                        result = left + right;\r\n                        break;\r\n                    case '-':\r\n                        result = left - right;\r\n                        break;\r\n                    case '*':\r\n                        result = left * right;\r\n                        break;\r\n                    case '/':\r\n                        result = left / right;\r\n                        break;\r\n                }\r\n\r\n                let type = typeof result;\r\n\r\n                if (type === 'number') {\r\n                    if (result % 1 === 0) {\r\n                        type = 'double';\r\n                    }\r\n                    else {\r\n                        type = 'int';\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: result,\r\n                }\r\n            }\r\n            case 'type': {\r\n                return node.type;\r\n            }\r\n            case 'arrayIndex': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            default: {\r\n                throw new Error('AST evaluator: Node type was not recognized.\\n  This is a bug.')\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;","/*\r\n    Main -> ((statement _) | (statement _ \";\")) {%\r\n        function(data) {\r\n            return data[0][0][0]\r\n        }\r\n    %}\r\n\r\n    statement -> (literal | identifier | assignment | functionCall | declaration | cast | array_index | operator | parenthesis | _) {%\r\n        function(data) {\r\n            return data[0][0]\r\n        }\r\n    %}\r\n\r\n    int -> [0-9]:+ {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'int',\r\n                int: data[0].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    double -> [0-9]:+ \".\" [^']:* {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'double',\r\n                double: data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    string -> \"\\\"\" [^\"]:* \"\\\"\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'string',\r\n                string: data[1].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    char -> \"'\" [^'] \"'\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'char',\r\n                char: data[1]\r\n            }\r\n        }\r\n    %}\r\n\r\n    literal -> (int | double | string | char) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'literal',\r\n                literal: data[0][0],\r\n            }\r\n        }\r\n    %}\r\n\r\n    identifier -> [a-zA-Z_] [a-zA-Z0-9_]:* {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'identifier',\r\n                identifier: (data[0] + data[1]).replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    _ -> [ ]:* {%\r\n        function(data) {\r\n            return null;\r\n        }\r\n    %}\r\n\r\n    assignment -> (declaration | identifier | array_index) _ \"=\" _ statement {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'assignment',\r\n                left: data[0][0],\r\n                right: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    functionCall -> identifier _ \"(\" _ statement _ \")\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'functionCall',\r\n                functionName: data[0],\r\n                argument: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    declaration -> (single_declaration | array_declaration) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'declaration',\r\n                declaration: data[0][0],\r\n            }\r\n        }\r\n    %}\r\n\r\n    single_declaration -> (type _ identifier) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'singleDeclaration',\r\n                type: data[0][0],\r\n                identifier: data[0][2]\r\n            }\r\n        }\r\n    %}\r\n\r\n    array_declaration -> type _ identifier _ \"[\" _ int _ \"]\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayDeclaration',\r\n                type: data[0],\r\n                identifier: data[2],\r\n                size: data[6],\r\n            }\r\n        }\r\n    %}\r\n\r\n    array_index -> identifier _ \"[\" _ statement _ \"]\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayIndex',\r\n                identifier: data[0],\r\n                value: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    type -> (\"int\" | \"int\" _ \"*\" | \"double\" | \"double\" _ \"*\" | \"string\" | \"char\" | \"char\" _ \"*\" | \"void\" | \"void\" _ \"*\") {%\r\n        function(data) {\r\n            let type;\r\n            if (data[0].length > 1) {\r\n                type = data[0][0] + data[0][2];\r\n            }\r\n            else {\r\n                type = data[0][0];\r\n            }\r\n            return {\r\n                nodeType: 'type',\r\n                type: type\r\n            }\r\n        }\r\n    %}\r\n\r\n    cast -> \"(\" _ type _ \")\" _ statement {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'cast',\r\n                type: data[2],\r\n                statement: data[6]\r\n            }\r\n        }\r\n    %}\r\n\r\n    operator -> (literal | identifier | functionCall | parenthesis) _ [+\\-*\\/] _ (literal | identifier | functionCall | parenthesis) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'operator',\r\n                left: data[0][0],\r\n                operator: data[2],\r\n                right: data[4][0]\r\n            }\r\n        }\r\n    %}\r\n\r\n    parenthesis -> \"(\" statement \")\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'parenthesis',\r\n                statement: data[1]\r\n            }\r\n        }\r\n    %}\r\n*/\r\n\r\nexport default {\r\n    Lexer: undefined,\r\n    ParserRules: [\r\n    {\"name\": \"Main$subexpression$1$subexpression$1\", \"symbols\": [\"statement\", \"_\"]},\r\n    {\"name\": \"Main$subexpression$1\", \"symbols\": [\"Main$subexpression$1$subexpression$1\"]},\r\n    {\"name\": \"Main$subexpression$1$subexpression$2\", \"symbols\": [\"statement\", \"_\", {\"literal\":\";\",\"pos\":18}]},\r\n    {\"name\": \"Main$subexpression$1\", \"symbols\": [\"Main$subexpression$1$subexpression$2\"]},\r\n    {\"name\": \"Main\", \"symbols\": [\"Main$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            return data[0][0][0]\r\n        }\r\n        },\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"literal\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"identifier\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"assignment\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"functionCall\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"declaration\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"cast\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"array_index\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"operator\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"parenthesis\"]},\r\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [\"_\"]},\r\n    {\"name\": \"statement\", \"symbols\": [\"statement$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            return data[0][0]\r\n        }\r\n        },\r\n    {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/]},\r\n    {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/, \"int$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'int',\r\n                int: data[0].join().replace(/,/g, '')\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"double$ebnf$1\", \"symbols\": [/[0-9]/]},\r\n    {\"name\": \"double$ebnf$1\", \"symbols\": [/[0-9]/, \"double$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"double$ebnf$2\", \"symbols\": []},\r\n    {\"name\": \"double$ebnf$2\", \"symbols\": [/[^']/, \"double$ebnf$2\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"double\", \"symbols\": [\"double$ebnf$1\", {\"literal\":\".\",\"pos\":86}, \"double$ebnf$2\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'double',\r\n                double: data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"string$ebnf$1\", \"symbols\": []},\r\n    {\"name\": \"string$ebnf$1\", \"symbols\": [/[^\"]/, \"string$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"string\", \"symbols\": [{\"literal\":\"\\\"\",\"pos\":97}, \"string$ebnf$1\", {\"literal\":\"\\\"\",\"pos\":102}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'string',\r\n                string: data[1].join().replace(/,/g, '')\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"char\", \"symbols\": [{\"literal\":\"'\",\"pos\":110}, /[^']/, {\"literal\":\"'\",\"pos\":114}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'char',\r\n                char: data[1]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [\"int\"]},\r\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [\"double\"]},\r\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [\"string\"]},\r\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [\"char\"]},\r\n    {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'literal',\r\n                literal: data[0][0],\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"identifier$ebnf$1\", \"symbols\": []},\r\n    {\"name\": \"identifier$ebnf$1\", \"symbols\": [/[a-zA-Z0-9_]/, \"identifier$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"identifier\", \"symbols\": [/[a-zA-Z_]/, \"identifier$ebnf$1\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'identifier',\r\n                identifier: (data[0] + data[1]).replace(/,/g, '')\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\r\n    {\"name\": \"_$ebnf$1\", \"symbols\": [/[ ]/, \"_$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\r\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": \r\n        function(data) {\r\n            return null;\r\n        }\r\n        },\r\n    {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"declaration\"]},\r\n    {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"identifier\"]},\r\n    {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"array_index\"]},\r\n    {\"name\": \"assignment\", \"symbols\": [\"assignment$subexpression$1\", \"_\", {\"literal\":\"=\",\"pos\":178}, \"_\", \"statement\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'assignment',\r\n                left: data[0][0],\r\n                right: data[4]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"functionCall\", \"symbols\": [\"identifier\", \"_\", {\"literal\":\"(\",\"pos\":194}, \"_\", \"statement\", \"_\", {\"literal\":\")\",\"pos\":202}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'functionCall',\r\n                functionName: data[0],\r\n                argument: data[4]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"declaration$subexpression$1\", \"symbols\": [\"single_declaration\"]},\r\n    {\"name\": \"declaration$subexpression$1\", \"symbols\": [\"array_declaration\"]},\r\n    {\"name\": \"declaration\", \"symbols\": [\"declaration$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'declaration',\r\n                declaration: data[0][0],\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"single_declaration$subexpression$1\", \"symbols\": [\"type\", \"_\", \"identifier\"]},\r\n    {\"name\": \"single_declaration\", \"symbols\": [\"single_declaration$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'singleDeclaration',\r\n                type: data[0][0],\r\n                identifier: data[0][2]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"array_declaration\", \"symbols\": [\"type\", \"_\", \"identifier\", \"_\", {\"literal\":\"[\",\"pos\":246}, \"_\", \"int\", \"_\", {\"literal\":\"]\",\"pos\":254}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayDeclaration',\r\n                type: data[0],\r\n                identifier: data[2],\r\n                size: data[6],\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"array_index\", \"symbols\": [\"identifier\", \"_\", {\"literal\":\"[\",\"pos\":266}, \"_\", \"statement\", \"_\", {\"literal\":\"]\",\"pos\":274}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayIndex',\r\n                identifier: data[0],\r\n                value: data[4]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"type$subexpression$1$string$1\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$1\"]},\r\n    {\"name\": \"type$subexpression$1$string$2\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$2\", \"_\", {\"literal\":\"*\",\"pos\":291}]},\r\n    {\"name\": \"type$subexpression$1$string$3\", \"symbols\": [{\"literal\":\"d\"}, {\"literal\":\"o\"}, {\"literal\":\"u\"}, {\"literal\":\"b\"}, {\"literal\":\"l\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$3\"]},\r\n    {\"name\": \"type$subexpression$1$string$4\", \"symbols\": [{\"literal\":\"d\"}, {\"literal\":\"o\"}, {\"literal\":\"u\"}, {\"literal\":\"b\"}, {\"literal\":\"l\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$4\", \"_\", {\"literal\":\"*\",\"pos\":303}]},\r\n    {\"name\": \"type$subexpression$1$string$5\", \"symbols\": [{\"literal\":\"s\"}, {\"literal\":\"t\"}, {\"literal\":\"r\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"g\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$5\"]},\r\n    {\"name\": \"type$subexpression$1$string$6\", \"symbols\": [{\"literal\":\"c\"}, {\"literal\":\"h\"}, {\"literal\":\"a\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$6\"]},\r\n    {\"name\": \"type$subexpression$1$string$7\", \"symbols\": [{\"literal\":\"c\"}, {\"literal\":\"h\"}, {\"literal\":\"a\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$7\", \"_\", {\"literal\":\"*\",\"pos\":319}]},\r\n    {\"name\": \"type$subexpression$1$string$8\", \"symbols\": [{\"literal\":\"v\"}, {\"literal\":\"o\"}, {\"literal\":\"i\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$8\"]},\r\n    {\"name\": \"type$subexpression$1$string$9\", \"symbols\": [{\"literal\":\"v\"}, {\"literal\":\"o\"}, {\"literal\":\"i\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\r\n    {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$9\", \"_\", {\"literal\":\"*\",\"pos\":331}]},\r\n    {\"name\": \"type\", \"symbols\": [\"type$subexpression$1\"], \"postprocess\": \r\n        function(data) {\r\n            let type;\r\n            if (data[0].length > 1) {\r\n                type = data[0][0] + data[0][2];\r\n            }\r\n            else {\r\n                type = data[0][0];\r\n            }\r\n            return {\r\n                nodeType: 'type',\r\n                type: type\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"cast\", \"symbols\": [{\"literal\":\"(\",\"pos\":340}, \"_\", \"type\", \"_\", {\"literal\":\")\",\"pos\":348}, \"_\", \"statement\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'cast',\r\n                type: data[2],\r\n                statement: data[6]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [\"literal\"]},\r\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [\"identifier\"]},\r\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [\"functionCall\"]},\r\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [\"parenthesis\"]},\r\n    {\"name\": \"operator$subexpression$2\", \"symbols\": [\"literal\"]},\r\n    {\"name\": \"operator$subexpression$2\", \"symbols\": [\"identifier\"]},\r\n    {\"name\": \"operator$subexpression$2\", \"symbols\": [\"functionCall\"]},\r\n    {\"name\": \"operator$subexpression$2\", \"symbols\": [\"parenthesis\"]},\r\n    {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\", \"_\", /[+\\-*/]/, \"_\", \"operator$subexpression$2\"], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'operator',\r\n                left: data[0][0],\r\n                operator: data[2],\r\n                right: data[4][0]\r\n            }\r\n        }\r\n        },\r\n    {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\",\"pos\":404}, \"statement\", {\"literal\":\")\",\"pos\":408}], \"postprocess\": \r\n        function(data) {\r\n            return {\r\n                nodeType: 'parenthesis',\r\n                statement: data[1]\r\n            }\r\n        }\r\n        }\r\n]\r\n  , ParserStart: \"Main\"\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CommandArea from './components/CommandArea.js';\nimport MemoryVisualizer from './components/MemoryVisualizer.js';\nimport nearley from 'nearley';\nimport Engine from './core/engine.js';\nimport Grammar from './core/grammar.js';\n\nfunction App(props) {\n    const [commandHeight, setCommandHeight] = useState(500);\n    const [isDragActive, setIsDragActive] = useState(false);\n    const [commandHistory, setCommandHistory] = useState([]);\n    const [uiState, setUiState] = useState([]);\n    \n    if (window.engine === undefined) {\n        window.engine = new Engine();\n        setUiState(window.engine.getState());\n    }\n\n    if (commandHistory.length === 0) {\n        setCommandHistory([{\n            style: 'info',\n            text: '-> Type help() for usage.',\n        }]);\n    }\n    \n    let handleMouseMove = (event) => {\n        if (!isDragActive) {\n            return;\n        }\n\n        let pageHeight = document.querySelector('body').clientHeight;\n\n        let newHeight = pageHeight - event.pageY;\n        if (newHeight < 250) {\n            newHeight = 250;\n        }\n        else if (newHeight > pageHeight * 4 / 7) {\n            newHeight = pageHeight * 4 / 7;\n        }\n        newHeight -= 3; // Account for spacer height\n        setCommandHeight(newHeight);\n    }\n\n    return (\n        <div className=\"App\"\n            style={{\n                cursor: isDragActive ? 'ns-resize' : undefined,\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseUp={() => {\n                setIsDragActive(false);\n            }}\n        >\n            <div className=\"mainContent\"\n                style={{flex: 1}}>\n                    <MemoryVisualizer memState={uiState} />\n            </div>\n            <div className=\"spacer\"\n                onMouseDown={() => {setIsDragActive(true)}}\n                style={{\n                    height: 6,\n                }} />\n            <CommandArea\n                height={ commandHeight }\n                commandHistory={commandHistory}\n                getPrediction={text => {\n                    let spaceSplit = text.split(' ');\n                    let spaceLastWord = spaceSplit[spaceSplit.length - 1];\n            \n                    let parenthesisSplit = text.split('(');\n                    let parenthesisLastWord = parenthesisSplit[parenthesisSplit.length - 1];\n            \n                    if (spaceLastWord === '' || parenthesisLastWord === '') {\n                        return text;\n                    }\n                    \n                    const zeroArgumentFunctions = ['help', 'reset', 'clearConsole', 'coalesce', 'getAllocationMethod', 'freeAll'];\n                    const oneArgumentFunctions = ['malloc', 'free', 'setMemorySize', 'sizeof', 'setAllocationMethod'];\n            \n                    let identifiers = window.engine.getIdentifiers();\n                    let functions = window.engine.getFunctions();\n\n                    let predictions = oneArgumentFunctions\n                        .map(elem => elem + '(')\n                        .concat(\n                            zeroArgumentFunctions.map(elem => elem + '()'))\n                        .concat(\n                            identifiers.filter(identifier => !functions.includes(identifier)));\n            \n                    predictions = predictions.sort();\n                    \n                    for (let prediction of predictions) {\n                        if (prediction.startsWith(spaceLastWord)) {\n                            spaceSplit[spaceSplit.length - 1] = prediction;\n                            return spaceSplit.join(' ');\n                        }\n                        if (prediction.startsWith(parenthesisLastWord)) {\n                            parenthesisSplit[parenthesisSplit.length - 1] = prediction;\n                            return parenthesisSplit.join('(');\n                        }\n                    }\n            \n                    return text;\n                }}\n                onCommand={command => {\n                    let historyToAdd = [];\n\n                    historyToAdd.push({\n                        style: 'command',\n                        text: command\n                    });\n\n                    // Grammar is imported from core/grammar.js\n                    let parser = new nearley.Parser(nearley.Grammar.fromCompiled(Grammar));\n\n                    let syntaxError = false;\n\n                    try {\n                        parser.feed(command.trim());\n                    }\n                    catch (ex) {\n                        syntaxError = true;\n                        historyToAdd.push({\n                            style: 'error',\n                            text: ex.message.slice(0, ex.message.search('Instead, ')).replace(/line [0-9]+ /, ''),\n                        });\n                    }\n\n                    if (!syntaxError) {\n                        try {\n                            let result = window.engine.evaluate(parser.results);\n\n                            setUiState(window.engine.getState());\n\n                            if (result !== undefined && result.toString() !== '') {\n                                if (result.nodeType === 'variable') {\n                                    result = result.value;\n                                }\n                                else if (result.nodeType === 'identifier') {\n                                    result = undefined;\n                                }\n                                else if (result.nodeType === 'ui-action') {\n                                    if (result.action === 'clearConsole') {\n                                        setCommandHistory([]);\n                                        return;\n                                    }\n                                    else {\n                                        throw new Error('Internal error: Unsupported UI action.');\n                                    }\n                                }\n                            }\n\n                            if (result === undefined) {\n                                result = 'null';\n                            }\n\n                            historyToAdd.push({\n                                style: 'info',\n                                text: `-> ${result.toString()}`,\n                            });\n                        }\n                        catch (ex) {\n                            // throw ex;\n                            historyToAdd.push({\n                                style: 'error',\n                                text: ex.message,\n                            });\n                        }\n                    }\n\n                    setCommandHistory([...commandHistory, ...historyToAdd]);\n                }}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}