{"version":3,"sources":["components/CommandInput.js","components/CommandHistory.js","components/CommandArea.js","components/MemoryCell.js","components/MemoryBlock.js","components/MemoryVisualizer.js","core/engine.js","core/grammar.js","App.js","index.js"],"names":["CommandInput","props","useState","uniqueId","id","text","setText","inputHistory","setInputHistory","historyIdx","setHistoryIdx","isFocused","setIsFocused","isHovered","setIsHovered","transform","useSpring","useEffect","el","document","getElementById","selectionStart","selectionEnd","value","length","className","div","style","onMouseEnter","onMouseLeave","opacity","language","atomDark","getPrediction","spellCheck","onChange","e","currentTarget","onFocus","onBlur","onKeyDown","key","preventDefault","prediction","onCommand","newHistoryIdx","newValue","HistoryItem","historyItem","replace","split","map","item","CommandHistory","historySize","setHistorySize","history","scrollArea","querySelector","scrollTop","scrollHeight","index","CommandArea","height","setHeight","config","mass","tension","friction","animatedHeight","setCommandHeight","commandHistory","command","MemoryCell","cellState","isAllocated","isReserved","MemoryBlock","blockState","cells","cell","MemoryVisualizer","memState","blocks","elem","Engine","this","memorySize","Math","floor","clientWidth","reset","state","i","push","variables","help","nodeType","type","undefined","clearConsole","action","malloc","argument","free","freeAll","cellValue","setMemorySize","coalesce","sizeof","Error","val","setAllocationMethod","method","currentAllocationMethod","getAllocationMethod","int","double","string","char","Object","keys","filter","size","parseInt","startIndex","bestSize","bestStart","cellVal","oldCellValue","ptr","slice","next","cellValuePtr","block","createNewBlock","node","Array","isArray","evaluate","literal","statement","hasOwnProperty","identifier","left","right","endsWith","func","functionName","arg","declaration","oldType","oldValue","validFromTypes","includes","result","parseFloat","operator","Lexer","ParserRules","name","symbols","pos","postprocess","data","d","concat","join","ParserStart","App","commandHeight","isDragActive","setIsDragActive","setCommandHistory","uiState","setUiState","window","engine","getState","cursor","onMouseMove","event","pageHeight","clientHeight","newHeight","pageY","onMouseUp","flex","onMouseDown","spaceSplit","spaceLastWord","parenthesisSplit","parenthesisLastWord","identifiers","getIdentifiers","functions","getFunctions","predictions","sort","startsWith","historyToAdd","parser","nearley","Parser","Grammar","fromCompiled","syntaxError","feed","trim","ex","message","search","results","toString","ReactDOM","render"],"mappings":"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","file":"static/js/main.71b28005.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { uniqueId } from 'lodash';\r\n\r\nfunction CommandInput(props) {\r\n    const [id] = useState(uniqueId('command-input-'));\r\n\r\n    const [text, setText] = useState('');\r\n    const [inputHistory, setInputHistory] = useState([]);\r\n    // -1 represents a new input\r\n    const [historyIdx, setHistoryIdx] = useState(-1);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const { transform } = useSpring({\r\n        transform: `translateX(${text !== '' || isFocused || isHovered ? 0 : -10}px)`\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (historyIdx !== -1) {\r\n            const el = document.getElementById(id);\r\n            el.selectionStart = el.selectionEnd = el.value.length;\r\n        }\r\n    }, [historyIdx, id]);\r\n\r\n    return (\r\n        <div className=\"command-input-container\">\r\n            <animated.div className=\"command-input-arrow\" style={{ transform }}>\r\n                {'>'}\r\n            </animated.div>\r\n            <div\r\n                className=\"command-input\"\r\n                onMouseEnter={() => {\r\n                    setIsHovered(true);\r\n                }}\r\n                onMouseLeave={() => {\r\n                    setIsHovered(false);\r\n                }}\r\n            >\r\n                <div className=\"code-render\">\r\n                    <span style={{ opacity: 0.5 }}>\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.getPrediction(text)}\r\n                        </SyntaxHighlighter>\r\n                    </span>\r\n                </div>\r\n                <div className=\"code-render\">\r\n                    <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                        {text}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n                <input\r\n                    id={id}\r\n                    spellCheck=\"false\"\r\n                    value={text}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value;\r\n                        setText(value);\r\n                        setHistoryIdx(-1);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setIsFocused(true);\r\n                    }}\r\n                    onBlur={() => {\r\n                        setIsFocused(false);\r\n                    }}\r\n                    onKeyDown={e => {\r\n                        if (e.key === 'Tab') {\r\n                            e.preventDefault();\r\n                            const prediction = props.getPrediction(text);\r\n                            setText(prediction);\r\n                        } else if (e.key === 'Enter') {\r\n                            if (text === '') {\r\n                                return;\r\n                            }\r\n                            setInputHistory([...inputHistory, text]);\r\n                            props.onCommand(text);\r\n                            setText('');\r\n                            setHistoryIdx(-1);\r\n                        } else if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n                            e.preventDefault();\r\n                            let newHistoryIdx;\r\n                            if (e.key === 'ArrowUp') {\r\n                                if (historyIdx === -1) {\r\n                                    if (inputHistory.length === 0) {\r\n                                        return;\r\n                                    }\r\n                                    newHistoryIdx = inputHistory.length - 1;\r\n                                    setHistoryIdx(newHistoryIdx);\r\n                                } else if (historyIdx === 0) {\r\n                                    return;\r\n                                } else {\r\n                                    newHistoryIdx = historyIdx - 1;\r\n                                    setHistoryIdx(newHistoryIdx);\r\n                                }\r\n                            } else if (e.key === 'ArrowDown') {\r\n                                if (historyIdx === -1) {\r\n                                    return;\r\n                                } else if (historyIdx === inputHistory.length - 1) {\r\n                                    newHistoryIdx = -1;\r\n                                    setHistoryIdx(newHistoryIdx);\r\n                                } else {\r\n                                    newHistoryIdx = historyIdx + 1;\r\n                                    setHistoryIdx(newHistoryIdx);\r\n                                }\r\n                            }\r\n\r\n                            if (newHistoryIdx !== -1) {\r\n                                const newValue = inputHistory[newHistoryIdx];\r\n                                setText(newValue);\r\n                            } else {\r\n                                setText('');\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandInput;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nfunction insertNewlines(text) {\r\n    return text\r\n        .replace(/ /g, ' ')\r\n        .split('\\n')\r\n        .map(function(item, key) {\r\n            return (\r\n                <span key={key}>\r\n                    {item}\r\n                    <br />\r\n                </span>\r\n            );\r\n        });\r\n}\r\n\r\nfunction HistoryItem(props) {\r\n    return (\r\n        // <animated.div style={{marginLeft: marginLeft, opacity: opacity}} className={`command-history-item ${props.historyItem.style}`}>\r\n        <div className={`command-history-item ${props.historyItem.style}`}>\r\n            {props.historyItem.style !== 'command' ? (\r\n                insertNewlines(props.historyItem.text)\r\n            ) : (\r\n                <div className=\"code-render\">\r\n                    <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                        {props.historyItem.text}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n            )}\r\n            {/* </animated.div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommandHistory(props) {\r\n    const [historySize, setHistorySize] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (historySize !== props.history.length) {\r\n            setHistorySize(props.history.length);\r\n            let scrollArea = document.querySelector('.command-history-container');\r\n            scrollArea.scrollTop = scrollArea.scrollHeight;\r\n        }\r\n    }, [historySize, props.history.length]);\r\n\r\n    return (\r\n        <div className=\"command-history-container\">\r\n            {props.history.map((historyItem, index) => (\r\n                <HistoryItem key={index} historyItem={historyItem} index={index} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandHistory;\r\n","import React, { useState } from 'react';\r\nimport CommandInput from './CommandInput.js';\r\nimport CommandHistory from './CommandHistory.js';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandArea(props) {\r\n    const [height, setHeight] = useState(200);\r\n\r\n    const [{ height: animatedHeight }, setCommandHeight] = useSpring(() => ({\r\n        height: 500,\r\n        config: { mass: 1, tension: 540, friction: 56 }\r\n    }));\r\n\r\n    if (height !== props.height) {\r\n        setHeight(props.height);\r\n        setCommandHeight({ height: props.height });\r\n    }\r\n\r\n    // Styles:\r\n    //  - command (for actual commands)\r\n    //  - error (syntax or runtime errors)\r\n    //  - info (non-error feedback)\r\n    // const pushToHistory = (payload, style) => {\r\n    //     let newHistoryItem = {};\r\n    //     newHistoryItem.style = style;\r\n    //     newHistoryItem.text = payload;\r\n    //     setCommandHistory([...commandHistory, newHistoryItem]);\r\n    // }\r\n\r\n    return (\r\n        <animated.div\r\n            className=\"command-area\"\r\n            style={{\r\n                height: animatedHeight\r\n            }}\r\n        >\r\n            <CommandHistory history={props.commandHistory} />\r\n            <CommandInput\r\n                getPrediction={props.getPrediction}\r\n                onCommand={command => props.onCommand(command)}\r\n            />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nexport default CommandArea;\r\n","import React from 'react';\r\n\r\nfunction MemoryCell(props) {\r\n    return (\r\n        <div\r\n            className={\r\n                'cell-container' +\r\n                (props.cellState.isAllocated ? ' allocated' : ' unallocated') +\r\n                (props.cellState.isReserved ? ' reserved' : ' unreserved')\r\n            }\r\n        >\r\n            {props.cellState.index}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCell;\r\n","import React from 'react';\r\nimport MemoryCell from './MemoryCell.js';\r\n\r\nfunction MemoryBlock(props) {\r\n    return (\r\n        <span className=\"memory-block-container\">\r\n            {props.blockState.cells.map((cell, index) => {\r\n                return <MemoryCell key={index} cellState={cell} />;\r\n            })}\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default MemoryBlock;\r\n","import React from 'react';\r\nimport MemoryBlock from './MemoryBlock.js';\r\n\r\nfunction MemoryVisualizer(props) {\r\n    return (\r\n        <div className=\"memory-container\">\r\n            {props.memState.blocks.map((elem, index) => {\r\n                return <MemoryBlock key={index} blockState={elem} />;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryVisualizer;\r\n","class Engine {\r\n    constructor() {\r\n        this.memorySize = Math.floor(document.querySelector('body').clientWidth / 46) * 3;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.state = [];\r\n        for (let i = 0; i < this.memorySize; i++) {\r\n            this.state.push({\r\n                isAllocated: false,\r\n                isReserved: false\r\n            });\r\n        }\r\n        this.state[0].isReserved = true;\r\n\r\n        // key: variable identifier\r\n        // value: {nodeType: 'variable', type: 'someType', value: someValue}\r\n        this.variables = {\r\n            help: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return (\r\n                        '\\n- Commands use C-style syntax.\\n' +\r\n                        '- Variable declaration and assignment is supported.\\n' +\r\n                        '- Intelligent live suggestions are provided. You can use tab to insert a suggestion.\\n' +\r\n                        '- The following functions are available:\\n' +\r\n                        '  - malloc(int)\\n' +\r\n                        '  - free(int)\\n' +\r\n                        '  - freeAll()\\n' +\r\n                        '  - coalesce()\\n' +\r\n                        '  - setMemorySize(int)\\n' +\r\n                        '  - sizeof(any)\\n' +\r\n                        '  - setAllocationMethod(\"best fit\" | \"worst fit\" | \"first fit\")\\n' +\r\n                        '  - getAllocationMethod()\\n' +\r\n                        '  - reset()\\n' +\r\n                        '  - clearConsole()'\r\n                    );\r\n                }\r\n            },\r\n            reset: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    this.reset();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined\r\n                    };\r\n                }\r\n            },\r\n            clearConsole: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return {\r\n                        nodeType: 'ui-action',\r\n                        action: 'clearConsole'\r\n                    };\r\n                }\r\n            },\r\n            malloc: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: argument => {\r\n                    let result = this.malloc(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: result\r\n                    };\r\n                }\r\n            },\r\n            free: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: argument => {\r\n                    this.free(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined\r\n                    };\r\n                }\r\n            },\r\n            freeAll: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    let i = 0;\r\n                    while (i !== undefined) {\r\n                        if (this.state[i].isAllocated) {\r\n                            this.free(i + 1);\r\n                        }\r\n                        i = this.state[i].cellValue;\r\n                    }\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined\r\n                    };\r\n                }\r\n            },\r\n            setMemorySize: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: argument => {\r\n                    this.setMemorySize(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined\r\n                    };\r\n                }\r\n            },\r\n            coalesce: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: argument => {\r\n                    this.coalesce();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'int',\r\n                        value: undefined\r\n                    };\r\n                }\r\n            },\r\n            sizeof: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: argument => {\r\n                    if (argument === undefined) {\r\n                        throw new Error(\r\n                            'Syntax error (\"sizeof()\"):\\n  Expected 1 argument, got 0.'\r\n                        );\r\n                    }\r\n                    let type = argument.type;\r\n                    if (type === undefined) {\r\n                        throw new Error('This is a bug lol');\r\n                    }\r\n\r\n                    let val;\r\n                    switch (type) {\r\n                        case 'int':\r\n                            val = 4;\r\n                            break;\r\n                        case 'char':\r\n                            val = 1;\r\n                            break;\r\n                        case 'double':\r\n                            val = 8;\r\n                            break;\r\n                        default:\r\n                            val = -1;\r\n                            break;\r\n                    }\r\n\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        type: 'string',\r\n                        value: val\r\n                    };\r\n                }\r\n            },\r\n            setAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: method => {\r\n                    if (method === 'best fit' || method === 'worst fit' || method === 'first fit') {\r\n                        this.variables.currentAllocationMethod = {\r\n                            nodeType: 'variable',\r\n                            type: 'string',\r\n                            value: method\r\n                        };\r\n                        return {\r\n                            nodeType: 'variable'\r\n                        };\r\n                    } else {\r\n                        throw new Error(\r\n                            'Runtime exception in setAllocationMethod(): Method is invalid.\\n  Valid methods are \"best fit\", \"worst fit\", and \"first fit\".'\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            getAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return this.variables.currentAllocationMethod;\r\n                }\r\n            },\r\n            currentAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'string',\r\n                value: 'first fit'\r\n            },\r\n            int: {\r\n                nodeType: 'type',\r\n                type: 'int'\r\n            },\r\n            double: {\r\n                nodeType: 'type',\r\n                type: 'double'\r\n            },\r\n            string: {\r\n                nodeType: 'type',\r\n                type: 'string'\r\n            },\r\n            char: {\r\n                nodeType: 'type',\r\n                type: 'char'\r\n            }\r\n        };\r\n    }\r\n\r\n    getIdentifiers() {\r\n        return Object.keys(this.variables);\r\n    }\r\n\r\n    getFunctions() {\r\n        return Object.keys(this.variables).filter(elem => this.variables[elem].type === 'function');\r\n    }\r\n\r\n    malloc(size) {\r\n        if (typeof size === 'string') {\r\n            size = parseInt(size);\r\n        }\r\n\r\n        if (size === 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be zero.');\r\n        } else if (size < 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be negative.');\r\n        }\r\n\r\n        let startIndex;\r\n\r\n        switch (this.variables.currentAllocationMethod.value) {\r\n            case 'first fit': {\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    if (!this.state[i].isAllocated) {\r\n                        let cellVal = this.state[i].cellValue\r\n                            ? this.state[i].cellValue\r\n                            : this.state.length;\r\n                        let currentSize = cellVal - i - 1;\r\n                        if (currentSize >= size) {\r\n                            startIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                break;\r\n            }\r\n            case 'best fit': {\r\n                let bestSize = this.state.length - 1; // accounts for reserved word\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = this.state[i].cellValue\r\n                        ? this.state[i].cellValue\r\n                        : this.state.length;\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 < bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            case 'worst fit': {\r\n                let bestSize = 0;\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = this.state[i].cellValue\r\n                        ? this.state[i].cellValue\r\n                        : this.state.length;\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 > bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error(\r\n                    'Runtime exception in malloc():\\n  Allocation method is invalid.\\n  Hint: Don\\t set currentAllocationMethod directly; instead, use setAllocationMethod().'\r\n                );\r\n        }\r\n\r\n        if (startIndex === undefined) {\r\n            throw new Error('Runtime exception in malloc(): Out of memory.');\r\n        }\r\n\r\n        for (let i = startIndex; i <= startIndex + size; i++) {\r\n            this.state[i].isAllocated = true;\r\n        }\r\n\r\n        this.state[startIndex].isReserved = true;\r\n        let oldCellValue = this.state[startIndex].cellValue;\r\n        this.state[startIndex].cellValue = startIndex + size + 1;\r\n        if (this.state[startIndex].cellValue >= this.state.length) {\r\n            this.state[startIndex].cellValue = undefined;\r\n        }\r\n\r\n        if (\r\n            this.state[startIndex + size + 1] !== undefined &&\r\n            !this.state[startIndex + size + 1].isReserved\r\n        ) {\r\n            this.state[startIndex + size + 1].isReserved = true;\r\n            this.state[startIndex + size + 1].cellValue = oldCellValue;\r\n        }\r\n\r\n        return startIndex + 1;\r\n    }\r\n\r\n    free(ptr) {\r\n        if (this.state[ptr - 1] === undefined) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer is out of bounds.');\r\n        } else if (!this.state[ptr - 1].isReserved || !this.state[ptr - 1].isAllocated) {\r\n            throw new Error(\r\n                'Runtime exception in free():\\n  Memory pointer does not point to the start of an allocated chunk.'\r\n            );\r\n        }\r\n\r\n        this.state[ptr - 1].isAllocated = false;\r\n\r\n        for (let i = ptr; i < this.state.length; i++) {\r\n            if (this.state[i].isReserved) {\r\n                break;\r\n            }\r\n            this.state[i].isAllocated = false;\r\n        }\r\n    }\r\n\r\n    setMemorySize(size) {\r\n        if (size < 1) {\r\n            throw new Error(\r\n                'Runtime exception in setMemorySize(): Memory size must be at least 1.'\r\n            );\r\n        }\r\n\r\n        if (size === this.memorySize) {\r\n            return;\r\n        } else if (size > this.memorySize) {\r\n            for (let i = 0; i < size - this.memorySize; i++) {\r\n                if (i === 0 && this.state[this.memorySize - 1].isAllocated) {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: true\r\n                    });\r\n                } else {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: false\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            this.state = this.state.slice(0, size);\r\n\r\n            for (let i = this.state.size - 1; i >= 0; i--) {\r\n                if (this.state[i].isReserved) {\r\n                    this.state[i].next = undefined;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.memorySize = size;\r\n    }\r\n\r\n    coalesce() {\r\n        let ptr = 0;\r\n        while (true) {\r\n            if (ptr >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (\r\n                this.state[ptr].cellValue === undefined ||\r\n                this.state[ptr].cellValue < 0 ||\r\n                this.state[ptr].cellValue >= this.state.length\r\n            ) {\r\n                break;\r\n            }\r\n\r\n            if (\r\n                !this.state[ptr].isAllocated &&\r\n                !this.state[this.state[ptr].cellValue].isAllocated\r\n            ) {\r\n                let cellValuePtr = this.state[ptr].cellValue;\r\n                this.state[ptr].cellValue = this.state[cellValuePtr].cellValue;\r\n                this.state[cellValuePtr].cellValue = undefined;\r\n                this.state[cellValuePtr].isReserved = false;\r\n                continue;\r\n            }\r\n\r\n            ptr = this.state[ptr].cellValue;\r\n        }\r\n    }\r\n\r\n    // Groups the state into blocks to help\r\n    // with UI structuring\r\n    getState() {\r\n        let state = {};\r\n        state.blocks = [];\r\n\r\n        let block;\r\n        let createNewBlock = true;\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            if (createNewBlock) {\r\n                if (block !== undefined) {\r\n                    state.blocks.push(block);\r\n                }\r\n\r\n                block = { cells: [] };\r\n                block.isAllocated = this.state[i].isAllocated;\r\n            }\r\n\r\n            block.cells.push({ ...this.state[i], index: i });\r\n\r\n            createNewBlock = i + 1 < this.state.length && this.state[i + 1].isReserved;\r\n        }\r\n\r\n        state.blocks.push(block);\r\n\r\n        return state;\r\n    }\r\n\r\n    // Recursively evaluates a node in the AST\r\n    // and returns the result, along with\r\n    // performing any side effects.\r\n    evaluate(node) {\r\n        if (node === null || node === undefined) {\r\n            return {\r\n                nodeType: 'variable',\r\n                value: undefined\r\n            };\r\n        }\r\n\r\n        if (Array.isArray(node)) {\r\n            if (node.length === 0) {\r\n                throw new Error(\"Parsing error: Command is incomplete.\\n  Did you forget a ')'?\");\r\n            }\r\n            return this.evaluate(node[0]);\r\n        }\r\n\r\n        switch (node.nodeType) {\r\n            case 'literal': {\r\n                return this.evaluate(node.literal);\r\n            }\r\n            case 'int': {\r\n                return node.int;\r\n            }\r\n            case 'char': {\r\n                return node.char;\r\n            }\r\n            case 'double': {\r\n                return node.double;\r\n            }\r\n            case 'string': {\r\n                return node.string;\r\n            }\r\n            case 'statement': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'identifier': {\r\n                if (!this.variables.hasOwnProperty(node.identifier)) {\r\n                    throw new Error(`Reference error: '${node.identifier}' is not defined.`);\r\n                }\r\n                return this.variables[node.identifier];\r\n            }\r\n            case 'assignment': {\r\n                let identifier;\r\n                if (node.left.nodeType === 'identifier') {\r\n                    identifier = node.left.identifier;\r\n                    if (this.variables[identifier] === undefined) {\r\n                        throw new Error(`Reference error: '${identifier}' is not defined.`);\r\n                    }\r\n                } else if (node.left.nodeType === 'declaration') {\r\n                    identifier = this.evaluate(node.left).identifier;\r\n                }\r\n\r\n                let value;\r\n\r\n                if (node.right.nodeType === 'literal') {\r\n                    value = this.evaluate(node.right);\r\n\r\n                    let type = node.right.literal.nodeType;\r\n\r\n                    value = {\r\n                        nodeType: 'variable',\r\n                        type: type,\r\n                        value: value\r\n                    };\r\n                } else if (node.right.nodeType === 'variable') {\r\n                    value = node.right;\r\n                } else {\r\n                    value = this.evaluate(node.right);\r\n                }\r\n\r\n                if (value.nodeType === 'variable') {\r\n                    if (this.variables[identifier].type !== value.type) {\r\n                        if (this.variables[identifier].type === 'int' && value.type === 'double') {\r\n                            this.variables[identifier].value = parseInt(value.value);\r\n                        } else if (\r\n                            this.variables[identifier].type === 'double' &&\r\n                            value.type === 'int'\r\n                        ) {\r\n                            this.variables[identifier].value = value.value;\r\n                        } else if (\r\n                            (this.variables[identifier].type.endsWith('*') ||\r\n                                this.variables[identifier].type === 'int' ||\r\n                                this.variables[identifier].type === 'char') &&\r\n                            (value.type.endsWith('*') ||\r\n                                value.type === 'int' ||\r\n                                value.type === 'char')\r\n                        ) {\r\n                            this.variables[identifier].value = value.value;\r\n                        } else {\r\n                            throw new Error(\r\n                                `Syntax error: Type mismatch between ${this.variables[identifier].type} and ${value.type}.`\r\n                            );\r\n                        }\r\n                    }\r\n                    this.variables[identifier].value = value.value;\r\n                } else {\r\n                    this.variables[identifier].type = 'int'; // um,\r\n                    this.variables[identifier].value = value;\r\n                }\r\n\r\n                return value;\r\n            }\r\n            case 'functionCall': {\r\n                let func = this.evaluate(node.functionName);\r\n                if (func.type !== 'function') {\r\n                    throw new Error(\r\n                        `Type error: '${node.functionName.identifier}' is not a function.`\r\n                    );\r\n                }\r\n\r\n                let arg = node.argument ? this.evaluate(node.argument) : undefined;\r\n\r\n                return func.value(\r\n                    arg !== undefined && arg.nodeType === 'variable' ? arg.value : arg\r\n                );\r\n            }\r\n            case 'declaration': {\r\n                return this.evaluate(node.declaration);\r\n            }\r\n            case 'singleDeclaration': {\r\n                let type = this.evaluate(node.type);\r\n                let identifier = node.identifier.identifier;\r\n                if (this.variables[identifier] !== undefined) {\r\n                    throw new Error(\r\n                        `Syntax error: Identifier '${identifier}' has already been declared.`\r\n                    );\r\n                }\r\n                this.variables[identifier] = {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: undefined\r\n                };\r\n                return node.identifier;\r\n            }\r\n            case 'arrayDeclaration': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            case 'cast': {\r\n                let oldValue = this.evaluate(node.statement);\r\n                let oldType;\r\n\r\n                switch (oldValue.nodeType) {\r\n                    case undefined:\r\n                        oldType = node.statement.literal.nodeType;\r\n                        break;\r\n                    case 'variable':\r\n                        oldType = oldValue.type;\r\n                        oldValue = oldValue.value;\r\n                        break;\r\n                    default:\r\n                        throw new Error(\r\n                            'Whatever you just did is \"not supported\" (probably a bug).'\r\n                        );\r\n                }\r\n\r\n                let validFromTypes = [];\r\n\r\n                if (node.type.type.endsWith('*')) {\r\n                    validFromTypes = [\r\n                        'int*',\r\n                        'double*',\r\n                        'string*',\r\n                        'char*',\r\n                        'int',\r\n                        'char',\r\n                        'void*'\r\n                    ];\r\n                } else {\r\n                    switch (node.type.type) {\r\n                        case 'char':\r\n                        case 'int':\r\n                            if (oldType === 'double') {\r\n                                oldValue = parseInt(oldValue);\r\n                            }\r\n                        // falls through\r\n                        case 'double':\r\n                            validFromTypes = [\r\n                                'int',\r\n                                'int*',\r\n                                'double',\r\n                                'double*',\r\n                                'string*',\r\n                                'char*',\r\n                                'char',\r\n                                'void*'\r\n                            ];\r\n                            break;\r\n                        // no default\r\n                    }\r\n                }\r\n\r\n                if (!validFromTypes.includes(oldType)) {\r\n                    throw new Error(\r\n                        `Syntax error:\\n  Type mismatch: Cannot cast from ${oldType} to ${node.type.type}`\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    nodeType: 'variable',\r\n                    type: node.type.type,\r\n                    value: oldValue\r\n                };\r\n            }\r\n            case 'parenthesis': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'operator': {\r\n                let left;\r\n                let right;\r\n\r\n                if (node.left.nodeType === 'literal') {\r\n                    left = {\r\n                        nodeType: 'variable',\r\n                        type: node.left.literal.nodeType,\r\n                        value: this.evaluate(node.left)\r\n                    };\r\n                } else {\r\n                    left = this.evaluate(node.left);\r\n                }\r\n\r\n                if (node.right.nodeType === 'literal') {\r\n                    right = {\r\n                        nodeType: 'variable',\r\n                        type: node.right.literal.nodeType,\r\n                        value: this.evaluate(node.right)\r\n                    };\r\n                } else {\r\n                    right = this.evaluate(node.right);\r\n                }\r\n\r\n                if (left.value !== undefined) {\r\n                    let type = left.type;\r\n                    left = left.value;\r\n                    if (type === 'double') {\r\n                        left = parseFloat(left);\r\n                    } else if (type === 'int') {\r\n                        left = parseInt(left);\r\n                    }\r\n                }\r\n\r\n                if (right.value !== undefined) {\r\n                    let type = right.type;\r\n                    right = right.value;\r\n                    if (type === 'double') {\r\n                        right = parseFloat(right);\r\n                    } else if (type === 'int') {\r\n                        right = parseInt(right);\r\n                    }\r\n                }\r\n\r\n                if (typeof left !== typeof right) {\r\n                    throw new Error('Syntax error: Type mismatch.');\r\n                }\r\n\r\n                let result;\r\n\r\n                switch (node.operator) {\r\n                    case '+':\r\n                        result = left + right;\r\n                        break;\r\n                    case '-':\r\n                        result = left - right;\r\n                        break;\r\n                    case '*':\r\n                        result = left * right;\r\n                        break;\r\n                    case '/':\r\n                        result = left / right;\r\n                        break;\r\n                    // no default\r\n                }\r\n\r\n                let type = typeof result;\r\n\r\n                if (type === 'number') {\r\n                    if (result % 1 === 0) {\r\n                        type = 'double';\r\n                    } else {\r\n                        type = 'int';\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: result\r\n                };\r\n            }\r\n            case 'type': {\r\n                return node.type;\r\n            }\r\n            case 'arrayIndex': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            default: {\r\n                throw new Error('AST evaluator: Node type was not recognized.\\n  This is a bug.');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","/*\r\n    Main -> ((statement _) | (statement _ \";\")) {%\r\n        function(data) {\r\n            return data[0][0][0]\r\n        }\r\n    %}\r\n\r\n    statement -> (literal | identifier | assignment | functionCall | declaration | cast | array_index | operator | parenthesis | _) {%\r\n        function(data) {\r\n            return data[0][0]\r\n        }\r\n    %}\r\n\r\n    int -> [0-9]:+ {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'int',\r\n                int: data[0].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    double -> [0-9]:+ \".\" [^']:* {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'double',\r\n                double: data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    string -> \"\\\"\" [^\"]:* \"\\\"\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'string',\r\n                string: data[1].join().replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    char -> \"'\" [^'] \"'\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'char',\r\n                char: data[1]\r\n            }\r\n        }\r\n    %}\r\n\r\n    literal -> (int | double | string | char) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'literal',\r\n                literal: data[0][0],\r\n            }\r\n        }\r\n    %}\r\n\r\n    identifier -> [a-zA-Z_] [a-zA-Z0-9_]:* {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'identifier',\r\n                identifier: (data[0] + data[1]).replace(/,/g, '')\r\n            }\r\n        }\r\n    %}\r\n\r\n    _ -> [ ]:* {%\r\n        function(data) {\r\n            return null;\r\n        }\r\n    %}\r\n\r\n    assignment -> (declaration | identifier | array_index) _ \"=\" _ statement {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'assignment',\r\n                left: data[0][0],\r\n                right: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    functionCall -> identifier _ \"(\" _ statement _ \")\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'functionCall',\r\n                functionName: data[0],\r\n                argument: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    declaration -> (single_declaration | array_declaration) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'declaration',\r\n                declaration: data[0][0],\r\n            }\r\n        }\r\n    %}\r\n\r\n    single_declaration -> (type _ identifier) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'singleDeclaration',\r\n                type: data[0][0],\r\n                identifier: data[0][2]\r\n            }\r\n        }\r\n    %}\r\n\r\n    array_declaration -> type _ identifier _ \"[\" _ int _ \"]\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayDeclaration',\r\n                type: data[0],\r\n                identifier: data[2],\r\n                size: data[6],\r\n            }\r\n        }\r\n    %}\r\n\r\n    array_index -> identifier _ \"[\" _ statement _ \"]\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'arrayIndex',\r\n                identifier: data[0],\r\n                value: data[4]\r\n            }\r\n        }\r\n    %}\r\n\r\n    type -> (\"int\" | \"int\" _ \"*\" | \"double\" | \"double\" _ \"*\" | \"string\" | \"char\" | \"char\" _ \"*\" | \"void\" | \"void\" _ \"*\") {%\r\n        function(data) {\r\n            let type;\r\n            if (data[0].length > 1) {\r\n                type = data[0][0] + data[0][2];\r\n            }\r\n            else {\r\n                type = data[0][0];\r\n            }\r\n            return {\r\n                nodeType: 'type',\r\n                type: type\r\n            }\r\n        }\r\n    %}\r\n\r\n    cast -> \"(\" _ type _ \")\" _ statement {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'cast',\r\n                type: data[2],\r\n                statement: data[6]\r\n            }\r\n        }\r\n    %}\r\n\r\n    operator -> (literal | identifier | functionCall | parenthesis) _ [+\\-*\\/] _ (literal | identifier | functionCall | parenthesis) {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'operator',\r\n                left: data[0][0],\r\n                operator: data[2],\r\n                right: data[4][0]\r\n            }\r\n        }\r\n    %}\r\n\r\n    parenthesis -> \"(\" statement \")\" {%\r\n        function(data) {\r\n            return {\r\n                nodeType: 'parenthesis',\r\n                statement: data[1]\r\n            }\r\n        }\r\n    %}\r\n*/\r\n\r\nexport default {\r\n    Lexer: undefined,\r\n    ParserRules: [\r\n        {\r\n            name: 'Main$subexpression$1$subexpression$1',\r\n            symbols: ['statement', '_']\r\n        },\r\n        {\r\n            name: 'Main$subexpression$1',\r\n            symbols: ['Main$subexpression$1$subexpression$1']\r\n        },\r\n        {\r\n            name: 'Main$subexpression$1$subexpression$2',\r\n            symbols: ['statement', '_', { literal: ';', pos: 18 }]\r\n        },\r\n        {\r\n            name: 'Main$subexpression$1',\r\n            symbols: ['Main$subexpression$1$subexpression$2']\r\n        },\r\n        {\r\n            name: 'Main',\r\n            symbols: ['Main$subexpression$1'],\r\n            postprocess: function(data) {\r\n                return data[0][0][0];\r\n            }\r\n        },\r\n        { name: 'statement$subexpression$1', symbols: ['literal'] },\r\n        { name: 'statement$subexpression$1', symbols: ['identifier'] },\r\n        { name: 'statement$subexpression$1', symbols: ['assignment'] },\r\n        { name: 'statement$subexpression$1', symbols: ['functionCall'] },\r\n        { name: 'statement$subexpression$1', symbols: ['declaration'] },\r\n        { name: 'statement$subexpression$1', symbols: ['cast'] },\r\n        { name: 'statement$subexpression$1', symbols: ['array_index'] },\r\n        { name: 'statement$subexpression$1', symbols: ['operator'] },\r\n        { name: 'statement$subexpression$1', symbols: ['parenthesis'] },\r\n        { name: 'statement$subexpression$1', symbols: ['_'] },\r\n        {\r\n            name: 'statement',\r\n            symbols: ['statement$subexpression$1'],\r\n            postprocess: function(data) {\r\n                return data[0][0];\r\n            }\r\n        },\r\n        { name: 'int$ebnf$1', symbols: [/[0-9]/] },\r\n        {\r\n            name: 'int$ebnf$1',\r\n            symbols: [/[0-9]/, 'int$ebnf$1'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        {\r\n            name: 'int',\r\n            symbols: ['int$ebnf$1'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'int',\r\n                    int: data[0].join().replace(/,/g, '')\r\n                };\r\n            }\r\n        },\r\n        { name: 'double$ebnf$1', symbols: [/[0-9]/] },\r\n        {\r\n            name: 'double$ebnf$1',\r\n            symbols: [/[0-9]/, 'double$ebnf$1'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        { name: 'double$ebnf$2', symbols: [] },\r\n        {\r\n            name: 'double$ebnf$2',\r\n            symbols: [/[^']/, 'double$ebnf$2'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        {\r\n            name: 'double',\r\n            symbols: ['double$ebnf$1', { literal: '.', pos: 86 }, 'double$ebnf$2'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'double',\r\n                    double:\r\n                        data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\r\n                };\r\n            }\r\n        },\r\n        { name: 'string$ebnf$1', symbols: [] },\r\n        {\r\n            name: 'string$ebnf$1',\r\n            symbols: [/[^\"]/, 'string$ebnf$1'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        {\r\n            name: 'string',\r\n            symbols: [{ literal: '\"', pos: 97 }, 'string$ebnf$1', { literal: '\"', pos: 102 }],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'string',\r\n                    string: data[1].join().replace(/,/g, '')\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'char',\r\n            symbols: [{ literal: \"'\", pos: 110 }, /[^']/, { literal: \"'\", pos: 114 }],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'char',\r\n                    char: data[1]\r\n                };\r\n            }\r\n        },\r\n        { name: 'literal$subexpression$1', symbols: ['int'] },\r\n        { name: 'literal$subexpression$1', symbols: ['double'] },\r\n        { name: 'literal$subexpression$1', symbols: ['string'] },\r\n        { name: 'literal$subexpression$1', symbols: ['char'] },\r\n        {\r\n            name: 'literal',\r\n            symbols: ['literal$subexpression$1'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'literal',\r\n                    literal: data[0][0]\r\n                };\r\n            }\r\n        },\r\n        { name: 'identifier$ebnf$1', symbols: [] },\r\n        {\r\n            name: 'identifier$ebnf$1',\r\n            symbols: [/[a-zA-Z0-9_]/, 'identifier$ebnf$1'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        {\r\n            name: 'identifier',\r\n            symbols: [/[a-zA-Z_]/, 'identifier$ebnf$1'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'identifier',\r\n                    identifier: (data[0] + data[1]).replace(/,/g, '')\r\n                };\r\n            }\r\n        },\r\n        { name: '_$ebnf$1', symbols: [] },\r\n        {\r\n            name: '_$ebnf$1',\r\n            symbols: [/[ ]/, '_$ebnf$1'],\r\n            postprocess: function arrconcat(d) {\r\n                return [d[0]].concat(d[1]);\r\n            }\r\n        },\r\n        {\r\n            name: '_',\r\n            symbols: ['_$ebnf$1'],\r\n            postprocess: function(data) {\r\n                return null;\r\n            }\r\n        },\r\n        { name: 'assignment$subexpression$1', symbols: ['declaration'] },\r\n        { name: 'assignment$subexpression$1', symbols: ['identifier'] },\r\n        { name: 'assignment$subexpression$1', symbols: ['array_index'] },\r\n        {\r\n            name: 'assignment',\r\n            symbols: [\r\n                'assignment$subexpression$1',\r\n                '_',\r\n                { literal: '=', pos: 178 },\r\n                '_',\r\n                'statement'\r\n            ],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'assignment',\r\n                    left: data[0][0],\r\n                    right: data[4]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'functionCall',\r\n            symbols: [\r\n                'identifier',\r\n                '_',\r\n                { literal: '(', pos: 194 },\r\n                '_',\r\n                'statement',\r\n                '_',\r\n                { literal: ')', pos: 202 }\r\n            ],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'functionCall',\r\n                    functionName: data[0],\r\n                    argument: data[4]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'declaration$subexpression$1',\r\n            symbols: ['single_declaration']\r\n        },\r\n        { name: 'declaration$subexpression$1', symbols: ['array_declaration'] },\r\n        {\r\n            name: 'declaration',\r\n            symbols: ['declaration$subexpression$1'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'declaration',\r\n                    declaration: data[0][0]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'single_declaration$subexpression$1',\r\n            symbols: ['type', '_', 'identifier']\r\n        },\r\n        {\r\n            name: 'single_declaration',\r\n            symbols: ['single_declaration$subexpression$1'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'singleDeclaration',\r\n                    type: data[0][0],\r\n                    identifier: data[0][2]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'array_declaration',\r\n            symbols: [\r\n                'type',\r\n                '_',\r\n                'identifier',\r\n                '_',\r\n                { literal: '[', pos: 246 },\r\n                '_',\r\n                'int',\r\n                '_',\r\n                { literal: ']', pos: 254 }\r\n            ],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'arrayDeclaration',\r\n                    type: data[0],\r\n                    identifier: data[2],\r\n                    size: data[6]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'array_index',\r\n            symbols: [\r\n                'identifier',\r\n                '_',\r\n                { literal: '[', pos: 266 },\r\n                '_',\r\n                'statement',\r\n                '_',\r\n                { literal: ']', pos: 274 }\r\n            ],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'arrayIndex',\r\n                    identifier: data[0],\r\n                    value: data[4]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$1',\r\n            symbols: [{ literal: 'i' }, { literal: 'n' }, { literal: 't' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$1']\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$2',\r\n            symbols: [{ literal: 'i' }, { literal: 'n' }, { literal: 't' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$2', '_', { literal: '*', pos: 291 }]\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$3',\r\n            symbols: [\r\n                { literal: 'd' },\r\n                { literal: 'o' },\r\n                { literal: 'u' },\r\n                { literal: 'b' },\r\n                { literal: 'l' },\r\n                { literal: 'e' }\r\n            ],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$3']\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$4',\r\n            symbols: [\r\n                { literal: 'd' },\r\n                { literal: 'o' },\r\n                { literal: 'u' },\r\n                { literal: 'b' },\r\n                { literal: 'l' },\r\n                { literal: 'e' }\r\n            ],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$4', '_', { literal: '*', pos: 303 }]\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$5',\r\n            symbols: [\r\n                { literal: 's' },\r\n                { literal: 't' },\r\n                { literal: 'r' },\r\n                { literal: 'i' },\r\n                { literal: 'n' },\r\n                { literal: 'g' }\r\n            ],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$5']\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$6',\r\n            symbols: [{ literal: 'c' }, { literal: 'h' }, { literal: 'a' }, { literal: 'r' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$6']\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$7',\r\n            symbols: [{ literal: 'c' }, { literal: 'h' }, { literal: 'a' }, { literal: 'r' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$7', '_', { literal: '*', pos: 319 }]\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$8',\r\n            symbols: [{ literal: 'v' }, { literal: 'o' }, { literal: 'i' }, { literal: 'd' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$8']\r\n        },\r\n        {\r\n            name: 'type$subexpression$1$string$9',\r\n            symbols: [{ literal: 'v' }, { literal: 'o' }, { literal: 'i' }, { literal: 'd' }],\r\n            postprocess: function joiner(d) {\r\n                return d.join('');\r\n            }\r\n        },\r\n        {\r\n            name: 'type$subexpression$1',\r\n            symbols: ['type$subexpression$1$string$9', '_', { literal: '*', pos: 331 }]\r\n        },\r\n        {\r\n            name: 'type',\r\n            symbols: ['type$subexpression$1'],\r\n            postprocess: function(data) {\r\n                let type;\r\n                if (data[0].length > 1) {\r\n                    type = data[0][0] + data[0][2];\r\n                } else {\r\n                    type = data[0][0];\r\n                }\r\n                return {\r\n                    nodeType: 'type',\r\n                    type: type\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'cast',\r\n            symbols: [\r\n                { literal: '(', pos: 340 },\r\n                '_',\r\n                'type',\r\n                '_',\r\n                { literal: ')', pos: 348 },\r\n                '_',\r\n                'statement'\r\n            ],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'cast',\r\n                    type: data[2],\r\n                    statement: data[6]\r\n                };\r\n            }\r\n        },\r\n        { name: 'operator$subexpression$1', symbols: ['literal'] },\r\n        { name: 'operator$subexpression$1', symbols: ['identifier'] },\r\n        { name: 'operator$subexpression$1', symbols: ['functionCall'] },\r\n        { name: 'operator$subexpression$1', symbols: ['parenthesis'] },\r\n        { name: 'operator$subexpression$2', symbols: ['literal'] },\r\n        { name: 'operator$subexpression$2', symbols: ['identifier'] },\r\n        { name: 'operator$subexpression$2', symbols: ['functionCall'] },\r\n        { name: 'operator$subexpression$2', symbols: ['parenthesis'] },\r\n        {\r\n            name: 'operator',\r\n            symbols: ['operator$subexpression$1', '_', /[+\\-*/]/, '_', 'operator$subexpression$2'],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'operator',\r\n                    left: data[0][0],\r\n                    operator: data[2],\r\n                    right: data[4][0]\r\n                };\r\n            }\r\n        },\r\n        {\r\n            name: 'parenthesis',\r\n            symbols: [{ literal: '(', pos: 404 }, 'statement', { literal: ')', pos: 408 }],\r\n            postprocess: function(data) {\r\n                return {\r\n                    nodeType: 'parenthesis',\r\n                    statement: data[1]\r\n                };\r\n            }\r\n        }\r\n    ],\r\n    ParserStart: 'Main'\r\n};\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport CommandArea from './components/CommandArea.js';\r\nimport MemoryVisualizer from './components/MemoryVisualizer.js';\r\nimport nearley from 'nearley';\r\nimport Engine from './core/engine.js';\r\nimport Grammar from './core/grammar.js';\r\n\r\nfunction App(props) {\r\n    const [commandHeight, setCommandHeight] = useState(500);\r\n    const [isDragActive, setIsDragActive] = useState(false);\r\n    const [commandHistory, setCommandHistory] = useState([]);\r\n    const [uiState, setUiState] = useState([]);\r\n\r\n    if (window.engine === undefined) {\r\n        window.engine = new Engine();\r\n        setUiState(window.engine.getState());\r\n    }\r\n\r\n    if (commandHistory.length === 0) {\r\n        setCommandHistory([\r\n            {\r\n                style: 'info',\r\n                text: '-> Type help() for usage.'\r\n            }\r\n        ]);\r\n    }\r\n\r\n    let handleMouseMove = event => {\r\n        if (!isDragActive) {\r\n            return;\r\n        }\r\n\r\n        let pageHeight = document.querySelector('body').clientHeight;\r\n\r\n        let newHeight = pageHeight - event.pageY;\r\n        if (newHeight < 250) {\r\n            newHeight = 250;\r\n        } else if (newHeight > (pageHeight * 4) / 7) {\r\n            newHeight = (pageHeight * 4) / 7;\r\n        }\r\n        newHeight -= 3; // Account for spacer height\r\n        setCommandHeight(newHeight);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"App\"\r\n            style={{\r\n                cursor: isDragActive ? 'ns-resize' : undefined\r\n            }}\r\n            onMouseMove={handleMouseMove}\r\n            onMouseUp={() => {\r\n                setIsDragActive(false);\r\n            }}\r\n        >\r\n            <div className=\"mainContent\" style={{ flex: 1 }}>\r\n                <MemoryVisualizer memState={uiState} />\r\n            </div>\r\n            <div\r\n                className=\"spacer\"\r\n                onMouseDown={() => {\r\n                    setIsDragActive(true);\r\n                }}\r\n                style={{\r\n                    height: 6\r\n                }}\r\n            />\r\n            <CommandArea\r\n                height={commandHeight}\r\n                commandHistory={commandHistory}\r\n                getPrediction={text => {\r\n                    let spaceSplit = text.split(' ');\r\n                    let spaceLastWord = spaceSplit[spaceSplit.length - 1];\r\n\r\n                    let parenthesisSplit = text.split('(');\r\n                    let parenthesisLastWord = parenthesisSplit[parenthesisSplit.length - 1];\r\n\r\n                    if (spaceLastWord === '' || parenthesisLastWord === '') {\r\n                        return text;\r\n                    }\r\n\r\n                    const zeroArgumentFunctions = [\r\n                        'help',\r\n                        'reset',\r\n                        'clearConsole',\r\n                        'coalesce',\r\n                        'getAllocationMethod',\r\n                        'freeAll'\r\n                    ];\r\n                    const oneArgumentFunctions = [\r\n                        'malloc',\r\n                        'free',\r\n                        'setMemorySize',\r\n                        'sizeof',\r\n                        'setAllocationMethod'\r\n                    ];\r\n\r\n                    let identifiers = window.engine.getIdentifiers();\r\n                    let functions = window.engine.getFunctions();\r\n\r\n                    let predictions = oneArgumentFunctions\r\n                        .map(elem => elem + '(')\r\n                        .concat(zeroArgumentFunctions.map(elem => elem + '()'))\r\n                        .concat(identifiers.filter(identifier => !functions.includes(identifier)));\r\n\r\n                    predictions = predictions.sort();\r\n\r\n                    for (let prediction of predictions) {\r\n                        if (prediction.startsWith(spaceLastWord)) {\r\n                            spaceSplit[spaceSplit.length - 1] = prediction;\r\n                            return spaceSplit.join(' ');\r\n                        }\r\n                        if (prediction.startsWith(parenthesisLastWord)) {\r\n                            parenthesisSplit[parenthesisSplit.length - 1] = prediction;\r\n                            return parenthesisSplit.join('(');\r\n                        }\r\n                    }\r\n\r\n                    return text;\r\n                }}\r\n                onCommand={command => {\r\n                    let historyToAdd = [];\r\n\r\n                    historyToAdd.push({\r\n                        style: 'command',\r\n                        text: command\r\n                    });\r\n\r\n                    // Grammar is imported from core/grammar.js\r\n                    let parser = new nearley.Parser(nearley.Grammar.fromCompiled(Grammar));\r\n\r\n                    let syntaxError = false;\r\n\r\n                    try {\r\n                        parser.feed(command.trim());\r\n                    } catch (ex) {\r\n                        syntaxError = true;\r\n                        historyToAdd.push({\r\n                            style: 'error',\r\n                            text: ex.message\r\n                                .slice(0, ex.message.search('Instead, '))\r\n                                .replace(/line [0-9]+ /, '')\r\n                        });\r\n                    }\r\n\r\n                    if (!syntaxError) {\r\n                        try {\r\n                            let result = window.engine.evaluate(parser.results);\r\n\r\n                            setUiState(window.engine.getState());\r\n\r\n                            if (result !== undefined && result.toString() !== '') {\r\n                                if (result.nodeType === 'variable') {\r\n                                    result = result.value;\r\n                                } else if (result.nodeType === 'identifier') {\r\n                                    result = undefined;\r\n                                } else if (result.nodeType === 'ui-action') {\r\n                                    if (result.action === 'clearConsole') {\r\n                                        setCommandHistory([]);\r\n                                        return;\r\n                                    } else {\r\n                                        throw new Error('Internal error: Unsupported UI action.');\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (result === undefined) {\r\n                                result = 'null';\r\n                            }\r\n\r\n                            historyToAdd.push({\r\n                                style: 'info',\r\n                                text: `-> ${result.toString()}`\r\n                            });\r\n                        } catch (ex) {\r\n                            // throw ex;\r\n                            historyToAdd.push({\r\n                                style: 'error',\r\n                                text: ex.message\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    setCommandHistory([...commandHistory, ...historyToAdd]);\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}