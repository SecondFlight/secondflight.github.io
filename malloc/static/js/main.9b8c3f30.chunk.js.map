{"version":3,"sources":["components/CommandInput.js","components/CommandHistory.js","components/CommandArea.js","components/MemoryCell.js","components/MemoryBlock.js","components/MemoryVisualizer.js","core/engine.js","App.js","index.js"],"names":["CommandInput","props","useState","text","setText","isFocused","setIsFocused","isHovered","setIsHovered","useSpring","marginLeft","arrowLeftMargin","setArrowLeftMargin","marginRight","arrowRightMargin","setArrowRightMargin","className","div","style","onMouseEnter","onMouseLeave","opacity","language","atomDark","getPrediction","spellCheck","value","onChange","e","currentTarget","onFocus","onBlur","onKeyDown","key","onCommand","preventDefault","prediction","HistoryItem","historyItem","replace","split","map","item","CommandHistory","historySize","setHistorySize","useEffect","history","length","scrollArea","document","querySelector","scrollTop","scrollHeight","index","CommandArea","height","setHeight","config","mass","tension","friction","animatedHeight","setCommandHeight","commandHistory","command","MemoryCell","cellState","isAllocated","isReserved","MemoryBlock","blockState","cells","cell","MemoryVisualizer","memState","blocks","elem","Engine","this","memorySize","Math","floor","clientWidth","reset","state","i","push","variables","help","nodeType","type","actionHadSideEffect","undefined","clearConsole","action","malloc","argument","free","freeAll","cellValue","setMemorySize","coalesce","sizeof","Error","val","setAllocationMethod","method","currentAllocationMethod","getAllocationMethod","int","double","string","char","Object","keys","filter","size","parseInt","startIndex","bestSize","bestStart","cellVal","oldCellValue","ptr","slice","next","cellValuePtr","block","createNewBlock","node","Array","isArray","evaluate","literal","statement","hasOwnProperty","identifier","left","right","func","functionName","arg","declaration","App","commandHeight","isDragActive","setIsDragActive","setCommandHistory","uiState","setUiState","window","engine","getState","cursor","onMouseMove","event","pageHeight","clientHeight","newHeight","pageY","onMouseUp","flex","onMouseDown","spaceSplit","spaceLastWord","parenthesisSplit","parenthesisLastWord","identifiers","getIdentifiers","functions","getFunctions","predictions","concat","includes","sort","startsWith","join","historyToAdd","grammar","Lexer","ParserRules","data","d","operator","ParserStart","parser","nearley","Parser","Grammar","fromCompiled","syntaxError","feed","trim","ex","message","search","result","results","toString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9b8c3f30.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandInput(props) {\r\n    const [text, setText] = useState('');\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    // This is bad code and I should probably feel some sort of remorse\r\n    const [{ marginLeft:  arrowLeftMargin },  setArrowLeftMargin]  = useSpring(() => ({marginLeft: -10}));\r\n    setArrowLeftMargin({marginLeft: text !== \"\" || isFocused || isHovered ? 0 : -10});\r\n    const [{ marginRight: arrowRightMargin }, setArrowRightMargin] = useSpring(() => ({marginRight: 10}));\r\n    setArrowRightMargin({marginRight: text !== \"\" || isFocused || isHovered ? 0 : 10});\r\n\r\n    return (\r\n        <div className=\"command-input-container\">\r\n            <animated.div\r\n                className=\"command-input-arrow\"\r\n                style={{\r\n                    marginLeft: arrowLeftMargin,\r\n                    marginRight: arrowRightMargin\r\n                }}\r\n            >\r\n                {'>'}\r\n            </animated.div>\r\n            <div\r\n                className=\"command-input\"\r\n                onMouseEnter={() => {\r\n                    setIsHovered(true);\r\n                }}\r\n                onMouseLeave={() => {\r\n                    setIsHovered(false);\r\n                }}\r\n            >\r\n                <div className=\"code-render\">\r\n                    <span style={{opacity: 0.5}}>\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.getPrediction(text)}\r\n                        </SyntaxHighlighter>\r\n                    </span>\r\n                </div>\r\n                <div className=\"code-render\">\r\n                    <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                        {text}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n                <input\r\n                    spellCheck=\"false\"\r\n                    value={text}\r\n                    onChange={(e) => {\r\n                        setText(e.currentTarget.value);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setIsFocused(true);\r\n                    }}\r\n                    onBlur={() => {\r\n                        setIsFocused(false);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Tab\") {\r\n                            e.preventDefault();\r\n                            let prediction = props.getPrediction(text);\r\n                            setText(prediction);\r\n                            return;\r\n                        }\r\n                        else if (e.key === \"Enter\") {\r\n                            if (text === '') {\r\n                                return;\r\n                            }\r\n                            props.onCommand(text);\r\n                            setText('');\r\n                            return;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandInput;","import React, { useEffect, useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nfunction insertNewlines(text) {\r\n    return text.replace(/ /g, ' ').split('\\n').map(function(item, key) {\r\n        return (\r\n            <span key={key}>\r\n                {item}\r\n                <br/>\r\n            </span>\r\n        )\r\n    })\r\n}\r\n\r\nfunction HistoryItem(props) {\r\n    return (\r\n        // <animated.div style={{marginLeft: marginLeft, opacity: opacity}} className={`command-history-item ${props.historyItem.style}`}>\r\n        <div className={`command-history-item ${props.historyItem.style}`}>\r\n            {\r\n                props.historyItem.style !== 'command' ? (\r\n                    insertNewlines(props.historyItem.text)\r\n                ) : (\r\n                    <div className=\"code-render\">\r\n                        <SyntaxHighlighter language=\"c\" style={atomDark}>\r\n                            {props.historyItem.text}\r\n                        </SyntaxHighlighter>\r\n                    </div>\r\n                )\r\n            }\r\n        {/* </animated.div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommandHistory(props) {\r\n    const [historySize, setHistorySize] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (historySize !== props.history.length) {\r\n            setHistorySize(props.history.length);\r\n            let scrollArea = document.querySelector('.command-history-container');\r\n            scrollArea.scrollTop = scrollArea.scrollHeight;\r\n        }\r\n    }, [historySize, props.history.length]);\r\n\r\n    return (\r\n        <div className=\"command-history-container\">\r\n            {\r\n                props.history.map((historyItem, index) =>\r\n                    <HistoryItem key={index} historyItem={historyItem} index={index} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommandHistory;","import React, { useState } from 'react';\r\nimport CommandInput from './CommandInput.js';\r\nimport CommandHistory from './CommandHistory.js';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nfunction CommandArea(props) {\r\n    const [height, setHeight] = useState(200);\r\n\r\n    const [{ height: animatedHeight }, setCommandHeight] = useSpring(() => ({ height: 300, config: { mass: 1, tension: 540, friction: 56 } }));\r\n\r\n    if (height !== props.height) {\r\n        setHeight(props.height);\r\n        setCommandHeight({ height: props.height });\r\n    }\r\n\r\n    // Styles:\r\n    //  - command (for actual commands)\r\n    //  - error (syntax or runtime errors)\r\n    //  - info (non-error feedback)\r\n    // const pushToHistory = (payload, style) => {\r\n    //     let newHistoryItem = {};\r\n    //     newHistoryItem.style = style;\r\n    //     newHistoryItem.text = payload;\r\n    //     setCommandHistory([...commandHistory, newHistoryItem]);\r\n    // }\r\n\r\n    return (\r\n        <animated.div className=\"command-area\" style={{\r\n            height: animatedHeight,\r\n        }}>\r\n            <CommandHistory history={props.commandHistory} />\r\n            <CommandInput\r\n                getPrediction={props.getPrediction}\r\n                onCommand={command => props.onCommand(command)}\r\n            />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nexport default CommandArea;","import React from 'react';\r\n\r\nfunction MemoryCell(props) {\r\n    return (\r\n        <div className={\"cell-container\"\r\n                                + (props.cellState.isAllocated ? ' allocated' : ' unallocated')\r\n                                + (props.cellState.isReserved ? ' reserved' : ' unreserved')}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCell;","import React from 'react';\r\nimport MemoryCell from './MemoryCell.js';\r\n\r\nfunction MemoryBlock(props) {\r\n    return <span className=\"memory-block-container\">\r\n        {props.blockState.cells.map((cell, index) => {\r\n            return <MemoryCell key={index} cellState={cell} />\r\n        })}\r\n    </span>\r\n}\r\n\r\nexport default MemoryBlock;","import React from 'react';\r\nimport MemoryBlock from './MemoryBlock.js';\r\n\r\nfunction MemoryVisualizer(props) {\r\n    return (\r\n        <div className=\"memory-container\">\r\n            {props.memState.blocks.map(\r\n                (elem, index) => {\r\n                    return <MemoryBlock key={index} blockState={elem} />\r\n                }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryVisualizer;","class Engine {\r\n    constructor() {\r\n        this.memorySize = Math.floor(document.querySelector('body').clientWidth / 46) * 3;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.state = [];\r\n        for (let i = 0; i < this.memorySize; i++) {\r\n            this.state.push({\r\n                isAllocated: false,\r\n                isReserved: false,\r\n            });\r\n        }\r\n        this.state[0].isReserved = true;\r\n\r\n        // key: variable identifier\r\n        // value: {nodeType: 'variable', type: 'someType', value: someValue}\r\n        this.variables = {\r\n            help: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return '\\n- Commands use C-style syntax.\\n' +\r\n                            '- Variable declaration and assignment is supported.\\n' + \r\n                            '- Intelligent live suggestions are provided. You can use tab to insert a suggestion.\\n' + \r\n                            '- The following functions are available:\\n' + \r\n                            '  - malloc(int)\\n' + \r\n                            '  - free(int)\\n' + \r\n                            '  - freeAll()\\n' + \r\n                            '  - coalesce()\\n' + \r\n                            '  - setMemorySize(int)\\n' +\r\n                            '  - sizeof(any)\\n' + \r\n                            '  - setAllocationMethod(\"best fit\" | \"worst fit\" | \"first fit\")\\n' + \r\n                            '  - getAllocationMethod()\\n' + \r\n                            '  - reset()\\n' + \r\n                            '  - clearConsole()';\r\n                }\r\n            },\r\n            reset: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    this.reset();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            clearConsole: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return {\r\n                        nodeType: 'ui-action',\r\n                        action: 'clearConsole',\r\n                    }\r\n                }\r\n            },\r\n            malloc: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    let result = this.malloc(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: result,\r\n                    }\r\n                }\r\n            },\r\n            free: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.free(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            freeAll: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    let i = 0;\r\n                    while(i !== undefined) {\r\n                        if (this.state[i].isAllocated) {\r\n                            this.free(i + 1);\r\n                        }\r\n                        i = this.state[i].cellValue;\r\n                    }\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            setMemorySize: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.setMemorySize(argument);\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            coalesce: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    this.coalesce();\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: true,\r\n                        type: 'int',\r\n                        value: undefined,\r\n                    }\r\n                }\r\n            },\r\n            sizeof: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (argument) => {\r\n                    if (argument === undefined) {\r\n                        throw new Error('Syntax error (\"sizeof()\"):\\n  Expected 1 argument, got 0.');\r\n                    }\r\n                    let type = argument.type;\r\n                    if (type === undefined) {\r\n                        throw new Error('This is a bug lol');\r\n                    }\r\n\r\n                    let val;\r\n                    switch(type) {\r\n                        case 'int':\r\n                            val = 1;\r\n                            break;\r\n                        case 'char':\r\n                            val = 1;\r\n                            break;\r\n                        case 'double':\r\n                            val = 2;\r\n                            break;\r\n                        default:\r\n                            val = -1;\r\n                            break;\r\n                    }\r\n\r\n                    return {\r\n                        nodeType: 'variable',\r\n                        actionHadSideEffect: false,\r\n                        type: 'string',\r\n                        value: val,\r\n                    }\r\n                }\r\n            },\r\n            setAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: (method) => {\r\n                    if (method === 'best fit' || method === 'worst fit' || method === 'first fit') {\r\n                        this.variables.currentAllocationMethod = {\r\n                            nodeType: 'variable',\r\n                            type: 'string',\r\n                            value: method\r\n                        }\r\n                        return {\r\n                            nodeType: 'variable',\r\n                            actionHadSideEffect: false\r\n                        };\r\n                    }\r\n                    else {\r\n                        throw new Error('Runtime exception in setAllocationMethod(): Method is invalid.\\n  Valid methods are \"best fit\", \"worst fit\", and \"first fit\".');\r\n                    }\r\n                }\r\n            },\r\n            getAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'function',\r\n                value: () => {\r\n                    return this.variables.currentAllocationMethod;\r\n                }\r\n            },\r\n            currentAllocationMethod: {\r\n                nodeType: 'variable',\r\n                type: 'string',\r\n                value: 'first fit'\r\n            },\r\n            int: {\r\n                nodeType: 'type',\r\n                type: 'int'\r\n            },\r\n            double: {\r\n                nodeType: 'type',\r\n                type: 'double'\r\n            },\r\n            string: {\r\n                nodeType: 'type',\r\n                type: 'string'\r\n            },\r\n            char: {\r\n                nodeType: 'type',\r\n                type: 'char'\r\n            }\r\n        };\r\n    }\r\n\r\n    getIdentifiers() {\r\n        return Object.keys(this.variables);\r\n    }\r\n\r\n    getFunctions() {\r\n        return Object.keys(this.variables)\r\n                    .filter(elem => this.variables[elem].type === 'function');\r\n    }\r\n\r\n\r\n\r\n    malloc(size) {\r\n        if (typeof size === 'string') {\r\n            size = parseInt(size);\r\n        }\r\n\r\n        if (size === 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be zero.');\r\n        }\r\n        else if (size < 0) {\r\n            throw new Error('Runtime exception in malloc():\\n  Size cannot be negative.');\r\n        }\r\n\r\n        let startIndex;\r\n\r\n        switch(this.variables.currentAllocationMethod.value) {\r\n            case('first fit'): {\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    if (!this.state[i].isAllocated) {\r\n                        let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                        let currentSize = cellVal - i - 1;\r\n                        if (currentSize >= size) {\r\n                            startIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                break;\r\n            }\r\n            case('best fit'): {\r\n                let bestSize = this.state.length - 1; // accounts for reserved word\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 < bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            case('worst fit'): {\r\n                let bestSize = 0;\r\n                let bestStart = 0;\r\n                let i = 0;\r\n                while (i !== undefined) {\r\n                    let cellVal = (this.state[i].cellValue ? this.state[i].cellValue : this.state.length);\r\n                    if (!this.state[i].isAllocated && cellVal - i - 1 > bestSize) {\r\n                        bestSize = cellVal - i - 1;\r\n                        bestStart = i;\r\n                    }\r\n                    i = this.state[i].cellValue;\r\n                }\r\n                if (size <= bestSize) {\r\n                    startIndex = bestStart;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error('Runtime exception in malloc():\\n  Allocation method is invalid.\\n  Hint: Don\\t set currentAllocationMethod directly; instead, use setAllocationMethod().')\r\n        }\r\n        \r\n        if (startIndex === undefined) {\r\n            throw new Error('Runtime exception in malloc(): Out of memory.');\r\n        }\r\n\r\n        for (let i = startIndex; i <= startIndex + size; i++) {\r\n            this.state[i].isAllocated = true;\r\n        }\r\n\r\n        this.state[startIndex].isReserved = true;\r\n        let oldCellValue = this.state[startIndex].cellValue;\r\n        this.state[startIndex].cellValue = startIndex + size + 1;\r\n        if (this.state[startIndex].cellValue >= this.state.length) {\r\n            this.state[startIndex].cellValue = undefined;\r\n        }\r\n\r\n        if (this.state[startIndex + size + 1] !== undefined && !this.state[startIndex + size + 1].isReserved) {\r\n            this.state[startIndex + size + 1].isReserved = true;\r\n            this.state[startIndex + size + 1].cellValue = oldCellValue;\r\n        }\r\n\r\n        return startIndex + 1;\r\n    }\r\n\r\n    free(ptr) {\r\n        if (this.state[ptr - 1] === undefined) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer is out of bounds.');\r\n        }\r\n        else if (!this.state[ptr - 1].isReserved || !this.state[ptr - 1].isAllocated) {\r\n            throw new Error('Runtime exception in free():\\n  Memory pointer does not point to the start of an allocated chunk.');\r\n        }\r\n        \r\n        this.state[ptr - 1].isAllocated = false;\r\n\r\n        for (let i = ptr; i < this.state.length; i++) {\r\n            if (this.state[i].isReserved) {\r\n                break;\r\n            }\r\n            this.state[i].isAllocated = false;\r\n        }\r\n    }\r\n\r\n    setMemorySize(size) {\r\n        if (size < 1) {\r\n            throw new Error('Runtime exception in setMemorySize(): Memory size must be at least 1.');\r\n        }\r\n\r\n        if (size === this.memorySize) {\r\n            return;\r\n        }\r\n        else if (size > this.memorySize) {\r\n            for (let i = 0; i < size - this.memorySize; i++) {\r\n                if (i === 0 && this.state[this.memorySize - 1].isAllocated) {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: true,\r\n                    });\r\n                }\r\n                else {\r\n                    this.state.push({\r\n                        isAllocated: false,\r\n                        isReserved: false,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.state = this.state.slice(0, size);\r\n\r\n            for (let i = this.state.size - 1; i >= 0; i--) {\r\n                if (this.state[i].isReserved) {\r\n                    this.state[i].next = undefined;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.memorySize = size;\r\n    }\r\n\r\n    coalesce() {\r\n        let ptr = 0;\r\n        while (true) {\r\n            if (ptr >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (this.state[ptr].cellValue === undefined ||\r\n                this.state[ptr].cellValue < 0 ||\r\n                this.state[ptr].cellValue >= this.state.length) {\r\n                break;\r\n            }\r\n\r\n            if (!this.state[ptr].isAllocated && !this.state[this.state[ptr].cellValue].isAllocated) {\r\n                let cellValuePtr = this.state[ptr].cellValue;\r\n                this.state[ptr].cellValue = this.state[cellValuePtr].cellValue;\r\n                this.state[cellValuePtr].cellValue = undefined;\r\n                this.state[cellValuePtr].isReserved = false;\r\n                continue;\r\n            }\r\n\r\n            ptr = this.state[ptr].cellValue;\r\n        }\r\n    }\r\n\r\n    // Groups the state into blocks to help\r\n    // with UI structuring\r\n    getState() {\r\n        let state = {};\r\n        state.blocks = [];\r\n\r\n        let block;\r\n        let createNewBlock = true;\r\n        for (let i = 0; i < this.state.length; i++) {\r\n            if (createNewBlock) {\r\n                if (block !== undefined) {\r\n                    state.blocks.push(block);\r\n                }\r\n\r\n                block = {cells: []};\r\n                block.isAllocated = this.state[i].isAllocated;\r\n            }\r\n\r\n            block.cells.push(this.state[i]);\r\n\r\n            createNewBlock = (i + 1 < this.state.length) && (this.state[i + 1].isReserved);\r\n        }\r\n        \r\n        state.blocks.push(block);\r\n\r\n        return state;\r\n    }\r\n\r\n\r\n\r\n    // Recursively evaluates a node in the AST\r\n    // and returns the result, along with\r\n    // performing any side effects.\r\n    evaluate(node) {\r\n        if (node === null || node === undefined) {\r\n            return {\r\n                nodeType: 'variable',\r\n                actionHadSideEffect: false,\r\n                value: undefined\r\n            };\r\n        }\r\n\r\n        if (Array.isArray(node)) {\r\n            if (node.length === 0) {\r\n                throw new Error('Parsing error: Command is incomplete.\\n  Did you forget a \\')\\'?');\r\n            }\r\n            return (this.evaluate(node[0]))\r\n        }\r\n\r\n        switch(node.nodeType) {\r\n            case 'literal': {\r\n                return this.evaluate(node.literal);\r\n            }\r\n            case 'int': {\r\n                return node.int;\r\n            }\r\n            case 'char': {\r\n                return node.char;\r\n            }\r\n            case 'double': {\r\n                return node.double;\r\n            }\r\n            case 'string': {\r\n                return node.string;\r\n            }\r\n            case 'statement': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'identifier': {\r\n                if (!this.variables.hasOwnProperty(node.identifier)) {\r\n                    throw new Error(`Reference error: '${node.identifier}' is not defined.`);\r\n                }\r\n                return this.variables[node.identifier];\r\n            }\r\n            case 'assignment': {\r\n                let identifier;\r\n                if (node.left.nodeType === 'identifier') {\r\n                    identifier = node.left.identifier;\r\n                    if (this.variables[identifier] === undefined) {\r\n                        throw new Error(`Reference error: '${identifier}' is not defined.`)\r\n                    }\r\n                }\r\n                else if (node.left.nodeType === 'declaration') {\r\n                    identifier = this.evaluate(node.left).identifier;\r\n                }\r\n\r\n                let value = this.evaluate(node.right);\r\n\r\n                if (value.nodeType === 'variable') {\r\n                    this.variables[identifier].type = value.type;\r\n                    this.variables[identifier].value = value.value;\r\n                }\r\n                else {\r\n                    this.variables[identifier].type = 'int';\r\n                    this.variables[identifier].value = value;\r\n                }\r\n\r\n                return value;\r\n            }\r\n            case 'functionCall': {\r\n                let func = this.evaluate(node.functionName);\r\n                if (func.type !== 'function') {\r\n                    throw new Error(`Type error: '${node.functionName.identifier}' is not a function.`);\r\n                }\r\n\r\n                let arg = node.argument ? this.evaluate(node.argument) : undefined;\r\n\r\n                return func.value(arg !== undefined && arg.nodeType === 'variable' ? arg.value : arg);\r\n            }\r\n            case 'declaration': {\r\n                return this.evaluate(node.declaration);\r\n            }\r\n            case 'singleDeclaration': {\r\n                let type = this.evaluate(node.type);\r\n                let identifier = node.identifier.identifier;\r\n                if (this.variables[identifier] !== undefined) {\r\n                    throw new Error(`Syntax error: Identifier '${identifier}' has already been declared.`);\r\n                }\r\n                this.variables[identifier] = {\r\n                    nodeType: 'variable',\r\n                    type: type,\r\n                    value: undefined,\r\n                }\r\n                return node.identifier;\r\n            }\r\n            case 'arrayDeclaration': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            case 'cast': {\r\n                throw new Error('Casting and type checking is not supported yet.');\r\n            }\r\n            case 'parenthesis': {\r\n                return this.evaluate(node.statement);\r\n            }\r\n            case 'operator': {\r\n                throw new Error('Math is not supported yet.');\r\n            }\r\n            case 'type': {\r\n                return node.type;\r\n            }\r\n            case 'arrayIndex': {\r\n                throw new Error('Array logic is not supported yet.');\r\n            }\r\n            default: {\r\n                throw new Error('AST evaluator: Node type was not recognized.\\n  This is a bug.')\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;","import React, { useState } from 'react';\nimport './App.css';\nimport CommandArea from './components/CommandArea.js';\nimport MemoryVisualizer from './components/MemoryVisualizer.js';\nimport nearley from 'nearley';\nimport Engine from './core/engine.js';\n\nfunction App(props) {\n    const [commandHeight, setCommandHeight] = useState(500);\n    const [isDragActive, setIsDragActive] = useState(false);\n    const [commandHistory, setCommandHistory] = useState([]);\n    const [uiState, setUiState] = useState([]);\n    \n    if (window.engine === undefined) {\n        window.engine = new Engine();\n        setUiState(window.engine.getState());\n    }\n\n    if (commandHistory.length === 0) {\n        setCommandHistory([{\n            style: 'info',\n            text: '-> Type help() for usage.',\n        }]);\n    }\n    \n    let handleMouseMove = (event) => {\n        if (!isDragActive) {\n            return;\n        }\n\n        let pageHeight = document.querySelector('body').clientHeight;\n\n        let newHeight = pageHeight - event.pageY;\n        if (newHeight < 250) {\n            newHeight = 250;\n        }\n        else if (newHeight > pageHeight * 4 / 7) {\n            newHeight = pageHeight * 4 / 7;\n        }\n        newHeight -= 3; // Account for spacer height\n        setCommandHeight(newHeight);\n    }\n\n    return (\n        <div className=\"App\"\n            style={{\n                cursor: isDragActive ? 'ns-resize' : undefined,\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseUp={() => {\n                setIsDragActive(false);\n            }}\n        >\n            <div className=\"mainContent\"\n                style={{flex: 1}}>\n                    <MemoryVisualizer memState={uiState} />\n            </div>\n            <div className=\"spacer\"\n                onMouseDown={() => {setIsDragActive(true)}}\n                style={{\n                    height: 6,\n                }} />\n            <CommandArea\n                height={ commandHeight }\n                commandHistory={commandHistory}\n                getPrediction={text => {\n                    let spaceSplit = text.split(' ');\n                    let spaceLastWord = spaceSplit[spaceSplit.length - 1];\n            \n                    let parenthesisSplit = text.split('(');\n                    let parenthesisLastWord = parenthesisSplit[parenthesisSplit.length - 1];\n            \n                    if (spaceLastWord === '' || parenthesisLastWord === '') {\n                        return text;\n                    }\n                    \n                    const zeroArgumentFunctions = ['help', 'reset', 'clearConsole', 'coalesce', 'getAllocationMethod', 'freeAll'];\n                    const oneArgumentFunctions = ['malloc', 'free', 'setMemorySize', 'sizeof', 'setAllocationMethod'];\n            \n                    let identifiers = window.engine.getIdentifiers();\n                    let functions = window.engine.getFunctions();\n\n                    let predictions = oneArgumentFunctions\n                        .map(elem => elem + '(')\n                        .concat(\n                            zeroArgumentFunctions.map(elem => elem + '()'))\n                        .concat(\n                            identifiers.filter(identifier => !functions.includes(identifier)));\n            \n                    predictions = predictions.sort();\n                    \n                    for (let prediction of predictions) {\n                        if (prediction.startsWith(spaceLastWord)) {\n                            spaceSplit[spaceSplit.length - 1] = prediction;\n                            return spaceSplit.join(' ');\n                        }\n                        if (prediction.startsWith(parenthesisLastWord)) {\n                            parenthesisSplit[parenthesisSplit.length - 1] = prediction;\n                            return parenthesisSplit.join('(');\n                        }\n                    }\n            \n                    return text;\n                }}\n                onCommand={command => {\n                    let historyToAdd = [];\n\n                    historyToAdd.push({\n                        style: 'command',\n                        text: command\n                    })\n\n                    /*\n                        Main -> ((statement _) | (statement _ \";\")) {%\n                            function(data) {\n                                return data[0][0][0]\n                            }\n                        %}\n\n                        statement -> (literal | identifier | assignment | functionCall | declaration | cast | array_index | operator | parenthesis | _) {%\n                            function(data) {\n                                return data[0][0]\n                            }\n                        %}\n\n                        int -> [0-9]:+ {%\n                            function(data) {\n                                return {\n                                    nodeType: 'int',\n                                    int: data[0].join().replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        double -> [0-9]:+ \".\" [^']:* {%\n                            function(data) {\n                                return {\n                                    nodeType: 'double',\n                                    double: data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        string -> \"\\\"\" [^\"]:* \"\\\"\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'string',\n                                    string: data[1].join().replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        char -> \"'\" [^'] \"'\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'char',\n                                    char: data[1]\n                                }\n                            }\n                        %}\n\n                        literal -> (int | double | string | char) {%\n                            function(data) {\n                                return {\n                                    nodeType: 'literal',\n                                    literal: data[0][0],\n                                }\n                            }\n                        %}\n\n                        identifier -> [a-zA-Z_] [a-zA-Z0-9_]:* {%\n                            function(data) {\n                                return {\n                                    nodeType: 'identifier',\n                                    identifier: (data[0] + data[1]).replace(/,/g, '')\n                                }\n                            }\n                        %}\n\n                        _ -> [ ]:* {%\n                            function(data) {\n                                return null;\n                            }\n                        %}\n\n                        assignment -> (declaration | identifier | array_index) _ \"=\" _ statement {%\n                            function(data) {\n                                return {\n                                    nodeType: 'assignment',\n                                    left: data[0][0],\n                                    right: data[4]\n                                }\n                            }\n                        %}\n\n                        functionCall -> identifier _ \"(\" _ statement _ \")\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'functionCall',\n                                    functionName: data[0],\n                                    argument: data[4]\n                                }\n                            }\n                        %}\n\n                        declaration -> (single_declaration | array_declaration) {%\n                            function(data) {\n                                return {\n                                    nodeType: 'declaration',\n                                    declaration: data[0][0],\n                                }\n                            }\n                        %}\n\n                        single_declaration -> (type _ identifier) {%\n                            function(data) {\n                                return {\n                                    nodeType: 'singleDeclaration',\n                                    type: data[0][0],\n                                    identifier: data[0][2]\n                                }\n                            }\n                        %}\n\n                        array_declaration -> type _ identifier _ \"[\" _ int _ \"]\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'arrayDeclaration',\n                                    type: data[0],\n                                    identifier: data[2],\n                                    size: data[6],\n                                }\n                            }\n                        %}\n\n                        array_index -> identifier _ \"[\" _ statement _ \"]\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'arrayIndex',\n                                    identifier: data[0],\n                                    value: data[4]\n                                }\n                            }\n                        %}\n\n                        type -> (\"int\" | \"int\" _ \"*\" | \"double\" | \"double\" _ \"*\" | \"string\" | \"char\" | \"char\" _ \"*\" | \"void\" | \"void\" _ \"*\") {%\n                            function(data) {\n                                let type;\n                                if (data[0].length > 1) {\n                                    type = data[0][0] + data[0][2];\n                                }\n                                else {\n                                    type = data[0][0];\n                                }\n                                return {\n                                    nodeType: 'type',\n                                    type: type\n                                }\n                            }\n                        %}\n\n                        cast -> \"(\" _ type _ \")\" _ statement {%\n                            function(data) {\n                                return {\n                                    nodeType: 'cast',\n                                    type: data[2],\n                                    statement: data[6]\n                                }\n                            }\n                        %}\n\n                        operator -> (literal | identifier | functionCall | parenthesis) _ [+\\-*\\\\] _ (literal | identifier | functionCall | parenthesis) {%\n                            function(data) {\n                                return {\n                                    nodeType: 'operator',\n                                    left: data[0][0],\n                                    operator: data[2],\n                                    right: data[4][0]\n                                }\n                            }\n                        %}\n\n                        parenthesis -> \"(\" statement \")\" {%\n                            function(data) {\n                                return {\n                                    nodeType: 'parenthesis',\n                                    statement: data[1]\n                                }\n                            }\n                        %}\n                    */\n\n                    let grammar = {\n                        Lexer: undefined,\n                        ParserRules: [\n                        {\"name\": \"Main$subexpression$1$subexpression$1\", \"symbols\": [\"statement\", \"_\"]},\n                        {\"name\": \"Main$subexpression$1\", \"symbols\": [\"Main$subexpression$1$subexpression$1\"]},\n                        {\"name\": \"Main$subexpression$1$subexpression$2\", \"symbols\": [\"statement\", \"_\", {\"literal\":\";\",\"pos\":18}]},\n                        {\"name\": \"Main$subexpression$1\", \"symbols\": [\"Main$subexpression$1$subexpression$2\"]},\n                        {\"name\": \"Main\", \"symbols\": [\"Main$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                return data[0][0][0]\n                            }\n                            },\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"literal\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"assignment\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"functionCall\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"declaration\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"cast\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"array_index\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"operator\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n                        {\"name\": \"statement$subexpression$1\", \"symbols\": [\"_\"]},\n                        {\"name\": \"statement\", \"symbols\": [\"statement$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                return data[0][0]\n                            }\n                            },\n                        {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/]},\n                        {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/, \"int$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'int',\n                                    int: data[0].join().replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"double$ebnf$1\", \"symbols\": [/[0-9]/]},\n                        {\"name\": \"double$ebnf$1\", \"symbols\": [/[0-9]/, \"double$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"double$ebnf$2\", \"symbols\": []},\n                        {\"name\": \"double$ebnf$2\", \"symbols\": [/[^']/, \"double$ebnf$2\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"double\", \"symbols\": [\"double$ebnf$1\", {\"literal\":\".\",\"pos\":86}, \"double$ebnf$2\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'double',\n                                    double: data[0].join().replace(/,/g, '') + '.' + data[2].join().replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"string$ebnf$1\", \"symbols\": []},\n                        {\"name\": \"string$ebnf$1\", \"symbols\": [/[^\"]/, \"string$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"string\", \"symbols\": [{\"literal\":\"\\\"\",\"pos\":97}, \"string$ebnf$1\", {\"literal\":\"\\\"\",\"pos\":102}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'string',\n                                    string: data[1].join().replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"char\", \"symbols\": [{\"literal\":\"'\",\"pos\":110}, /[^']/, {\"literal\":\"'\",\"pos\":114}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'char',\n                                    char: data[1]\n                                }\n                            }\n                            },\n                        {\"name\": \"literal$subexpression$1\", \"symbols\": [\"int\"]},\n                        {\"name\": \"literal$subexpression$1\", \"symbols\": [\"double\"]},\n                        {\"name\": \"literal$subexpression$1\", \"symbols\": [\"string\"]},\n                        {\"name\": \"literal$subexpression$1\", \"symbols\": [\"char\"]},\n                        {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'literal',\n                                    literal: data[0][0],\n                                }\n                            }\n                            },\n                        {\"name\": \"identifier$ebnf$1\", \"symbols\": []},\n                        {\"name\": \"identifier$ebnf$1\", \"symbols\": [/[a-zA-Z0-9_]/, \"identifier$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"identifier\", \"symbols\": [/[a-zA-Z_]/, \"identifier$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'identifier',\n                                    identifier: (data[0] + data[1]).replace(/,/g, '')\n                                }\n                            }\n                            },\n                        {\"name\": \"_$ebnf$1\", \"symbols\": []},\n                        {\"name\": \"_$ebnf$1\", \"symbols\": [/[ ]/, \"_$ebnf$1\"], \"postprocess\": function arrconcat(d) {return [d[0]].concat(d[1]);}},\n                        {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": \n                            function(data) {\n                                return null;\n                            }\n                            },\n                        {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"declaration\"]},\n                        {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"assignment$subexpression$1\", \"symbols\": [\"array_index\"]},\n                        {\"name\": \"assignment\", \"symbols\": [\"assignment$subexpression$1\", \"_\", {\"literal\":\"=\",\"pos\":178}, \"_\", \"statement\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'assignment',\n                                    left: data[0][0],\n                                    right: data[4]\n                                }\n                            }\n                            },\n                        {\"name\": \"functionCall\", \"symbols\": [\"identifier\", \"_\", {\"literal\":\"(\",\"pos\":194}, \"_\", \"statement\", \"_\", {\"literal\":\")\",\"pos\":202}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'functionCall',\n                                    functionName: data[0],\n                                    argument: data[4]\n                                }\n                            }\n                            },\n                        {\"name\": \"declaration$subexpression$1\", \"symbols\": [\"single_declaration\"]},\n                        {\"name\": \"declaration$subexpression$1\", \"symbols\": [\"array_declaration\"]},\n                        {\"name\": \"declaration\", \"symbols\": [\"declaration$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'declaration',\n                                    declaration: data[0][0],\n                                }\n                            }\n                            },\n                        {\"name\": \"single_declaration$subexpression$1\", \"symbols\": [\"type\", \"_\", \"identifier\"]},\n                        {\"name\": \"single_declaration\", \"symbols\": [\"single_declaration$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'singleDeclaration',\n                                    type: data[0][0],\n                                    identifier: data[0][2]\n                                }\n                            }\n                            },\n                        {\"name\": \"array_declaration\", \"symbols\": [\"type\", \"_\", \"identifier\", \"_\", {\"literal\":\"[\",\"pos\":246}, \"_\", \"int\", \"_\", {\"literal\":\"]\",\"pos\":254}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'arrayDeclaration',\n                                    type: data[0],\n                                    identifier: data[2],\n                                    size: data[6],\n                                }\n                            }\n                            },\n                        {\"name\": \"array_index\", \"symbols\": [\"identifier\", \"_\", {\"literal\":\"[\",\"pos\":266}, \"_\", \"statement\", \"_\", {\"literal\":\"]\",\"pos\":274}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'arrayIndex',\n                                    identifier: data[0],\n                                    value: data[4]\n                                }\n                            }\n                            },\n                        {\"name\": \"type$subexpression$1$string$1\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$1\"]},\n                        {\"name\": \"type$subexpression$1$string$2\", \"symbols\": [{\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$2\", \"_\", {\"literal\":\"*\",\"pos\":291}]},\n                        {\"name\": \"type$subexpression$1$string$3\", \"symbols\": [{\"literal\":\"d\"}, {\"literal\":\"o\"}, {\"literal\":\"u\"}, {\"literal\":\"b\"}, {\"literal\":\"l\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$3\"]},\n                        {\"name\": \"type$subexpression$1$string$4\", \"symbols\": [{\"literal\":\"d\"}, {\"literal\":\"o\"}, {\"literal\":\"u\"}, {\"literal\":\"b\"}, {\"literal\":\"l\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$4\", \"_\", {\"literal\":\"*\",\"pos\":303}]},\n                        {\"name\": \"type$subexpression$1$string$5\", \"symbols\": [{\"literal\":\"s\"}, {\"literal\":\"t\"}, {\"literal\":\"r\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"g\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$5\"]},\n                        {\"name\": \"type$subexpression$1$string$6\", \"symbols\": [{\"literal\":\"c\"}, {\"literal\":\"h\"}, {\"literal\":\"a\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$6\"]},\n                        {\"name\": \"type$subexpression$1$string$7\", \"symbols\": [{\"literal\":\"c\"}, {\"literal\":\"h\"}, {\"literal\":\"a\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$7\", \"_\", {\"literal\":\"*\",\"pos\":319}]},\n                        {\"name\": \"type$subexpression$1$string$8\", \"symbols\": [{\"literal\":\"v\"}, {\"literal\":\"o\"}, {\"literal\":\"i\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$8\"]},\n                        {\"name\": \"type$subexpression$1$string$9\", \"symbols\": [{\"literal\":\"v\"}, {\"literal\":\"o\"}, {\"literal\":\"i\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n                        {\"name\": \"type$subexpression$1\", \"symbols\": [\"type$subexpression$1$string$9\", \"_\", {\"literal\":\"*\",\"pos\":331}]},\n                        {\"name\": \"type\", \"symbols\": [\"type$subexpression$1\"], \"postprocess\": \n                            function(data) {\n                                let type;\n                                if (data[0].length > 1) {\n                                    type = data[0][0] + data[0][2];\n                                }\n                                else {\n                                    type = data[0][0];\n                                }\n                                return {\n                                    nodeType: 'type',\n                                    type: type\n                                }\n                            }\n                            },\n                        {\"name\": \"cast\", \"symbols\": [{\"literal\":\"(\",\"pos\":340}, \"_\", \"type\", \"_\", {\"literal\":\")\",\"pos\":348}, \"_\", \"statement\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'cast',\n                                    type: data[2],\n                                    statement: data[6]\n                                }\n                            }\n                            },\n                        {\"name\": \"operator$subexpression$1\", \"symbols\": [\"literal\"]},\n                        {\"name\": \"operator$subexpression$1\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"operator$subexpression$1\", \"symbols\": [\"functionCall\"]},\n                        {\"name\": \"operator$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n                        {\"name\": \"operator$subexpression$2\", \"symbols\": [\"literal\"]},\n                        {\"name\": \"operator$subexpression$2\", \"symbols\": [\"identifier\"]},\n                        {\"name\": \"operator$subexpression$2\", \"symbols\": [\"functionCall\"]},\n                        {\"name\": \"operator$subexpression$2\", \"symbols\": [\"parenthesis\"]},\n                        {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\", \"_\", /[+\\-*\\\\]/, \"_\", \"operator$subexpression$2\"], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'operator',\n                                    left: data[0][0],\n                                    operator: data[2],\n                                    right: data[4][0]\n                                }\n                            }\n                            },\n                        {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\",\"pos\":404}, \"statement\", {\"literal\":\")\",\"pos\":408}], \"postprocess\": \n                            function(data) {\n                                return {\n                                    nodeType: 'parenthesis',\n                                    statement: data[1]\n                                }\n                            }\n                            }\n                    ]\n                      , ParserStart: \"Main\"\n                    }\n\n                    let parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));\n\n                    let syntaxError = false;\n\n                    try {\n                        parser.feed(command.trim());\n                    }\n                    catch (ex) {\n                        syntaxError = true;\n                        historyToAdd.push({\n                            style: 'error',\n                            text: ex.message.slice(0, ex.message.search('Instead, ')).replace(/line [0-9]+ /, ''),\n                        });\n                    }\n\n                    if (!syntaxError) {\n                        try {\n                            let result = window.engine.evaluate(parser.results);\n\n                            if (result.actionHadSideEffect) {\n                                setUiState(window.engine.getState());\n                            }\n\n                            if (result !== undefined && result.toString() !== '') {\n                                if (result.nodeType === 'variable') {\n                                    result = result.value;\n                                }\n                                else if (result.nodeType === 'identifier') {\n                                    result = undefined;\n                                }\n                                else if (result.nodeType === 'ui-action') {\n                                    if (result.action === 'clearConsole') {\n                                        setCommandHistory([]);\n                                        return;\n                                    }\n                                    else {\n                                        throw new Error('Internal error: Unsupported UI action.');\n                                    }\n                                }\n                            }\n\n                            if (result === undefined) {\n                                result = 'null';\n                            }\n\n                            historyToAdd.push({\n                                style: 'info',\n                                text: `-> ${result.toString()}`,\n                            });\n                        }\n                        catch (ex) {\n                            historyToAdd.push({\n                                style: 'error',\n                                text: ex.message,\n                            });\n                        }\n                    }\n\n                    setCommandHistory([...commandHistory, ...historyToAdd]);\n                }}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}